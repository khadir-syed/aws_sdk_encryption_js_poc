"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/* Here I am reusing the Material implementation and interface from material-management.
 * This is because there are many security guarantees that this implementations offer
 * that map to the current implementation of raw AES keyrings.
 * The KeyringTrace is an unfortunate case because there is no mapping.
 * However the trade off seems worth it and the convolutions to make it work seem minimal.
 */
const material_management_1 = require("@aws-crypto/material-management");
const raw_aes_algorithm_suite_1 = require("./raw_aes_algorithm_suite");
class NodeRawAesMaterial {
    constructor(suiteId) {
        this.keyringTrace = [];
        this.encryptionContext = Object.freeze({});
        /* Precondition: NodeRawAesMaterial suiteId must be RawAesWrappingSuiteIdentifier. */
        material_management_1.needs(raw_aes_algorithm_suite_1.RawAesWrappingSuiteIdentifier[suiteId], 'suiteId not supported.');
        this.suite = new material_management_1.NodeAlgorithmSuite(suiteId);
        /* NodeRawAesMaterial need to set a flag, this is an abuse of TraceFlags
         * because the material is not generated.
         * but CryptographicMaterial force a flag to be set.
         */
        const setFlags = material_management_1.KeyringTraceFlag.WRAPPING_KEY_GENERATED_DATA_KEY;
        material_management_1.decorateCryptographicMaterial(this, setFlags);
        Object.setPrototypeOf(this, NodeRawAesMaterial.prototype);
        Object.freeze(this);
    }
    hasValidKey() {
        return this.hasUnencryptedDataKey;
    }
}
exports.NodeRawAesMaterial = NodeRawAesMaterial;
material_management_1.frozenClass(NodeRawAesMaterial);
class WebCryptoRawAesMaterial {
    constructor(suiteId) {
        this.keyringTrace = [];
        this.encryptionContext = Object.freeze({});
        /* Precondition: WebCryptoAlgorithmSuite suiteId must be RawAesWrappingSuiteIdentifier. */
        material_management_1.needs(raw_aes_algorithm_suite_1.RawAesWrappingSuiteIdentifier[suiteId], 'suiteId not supported.');
        this.suite = new material_management_1.WebCryptoAlgorithmSuite(suiteId);
        this.validUsages = Object.freeze(['decrypt', 'encrypt']);
        /* WebCryptoRawAesMaterial need to set a flag, this is an abuse of TraceFlags
         * because the material is not generated.
         * but CryptographicMaterial force a flag to be set.
         */
        const setFlag = material_management_1.KeyringTraceFlag.WRAPPING_KEY_GENERATED_DATA_KEY;
        material_management_1.decorateCryptographicMaterial(this, setFlag);
        material_management_1.decorateWebCryptoMaterial(this, setFlag);
        Object.setPrototypeOf(this, WebCryptoRawAesMaterial.prototype);
        Object.freeze(this);
    }
    hasValidKey() {
        return this.hasUnencryptedDataKey && this.hasCryptoKey;
    }
}
exports.WebCryptoRawAesMaterial = WebCryptoRawAesMaterial;
material_management_1.frozenClass(WebCryptoRawAesMaterial);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF3X2Flc19tYXRlcmlhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yYXdfYWVzX21hdGVyaWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7OztHQWFHOztBQUVIOzs7OztHQUtHO0FBRUgseUVBZ0J3QztBQUV4Qyx1RUFHa0M7QUFFbEMsTUFBYSxrQkFBa0I7SUFTN0IsWUFBYSxPQUFnQztRQUY3QyxpQkFBWSxHQUFtQixFQUFFLENBQUE7UUFDakMsc0JBQWlCLEdBQXNCLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7UUFFdEQscUZBQXFGO1FBQ3JGLDJCQUFLLENBQUMsdURBQTZCLENBQUMsT0FBTyxDQUFDLEVBQUUsd0JBQXdCLENBQUMsQ0FBQTtRQUN2RSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksd0NBQWtCLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDNUM7OztXQUdHO1FBQ0gsTUFBTSxRQUFRLEdBQUcsc0NBQWdCLENBQUMsK0JBQStCLENBQUE7UUFDakUsbURBQTZCLENBQXFCLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQTtRQUNqRSxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUN6RCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3JCLENBQUM7SUFDRCxXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUE7SUFDbkMsQ0FBQztDQUNGO0FBekJELGdEQXlCQztBQUNELGlDQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtBQUUvQixNQUFhLHVCQUF1QjtJQWNsQyxZQUFhLE9BQWdDO1FBTjdDLGlCQUFZLEdBQW1CLEVBQUUsQ0FBQTtRQUtqQyxzQkFBaUIsR0FBc0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUV0RCwwRkFBMEY7UUFDMUYsMkJBQUssQ0FBQyx1REFBNkIsQ0FBQyxPQUFPLENBQUMsRUFBRSx3QkFBd0IsQ0FBQyxDQUFBO1FBQ3ZFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSw2Q0FBdUIsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNqRCxJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBb0IsU0FBUyxFQUFxQixTQUFTLENBQUMsQ0FBQyxDQUFBO1FBQzlGOzs7V0FHRztRQUNILE1BQU0sT0FBTyxHQUFHLHNDQUFnQixDQUFDLCtCQUErQixDQUFBO1FBQ2hFLG1EQUE2QixDQUEwQixJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFDckUsK0NBQXlCLENBQTBCLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUNqRSxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSx1QkFBdUIsQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUM5RCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3JCLENBQUM7SUFDRCxXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUMscUJBQXFCLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQTtJQUN4RCxDQUFDO0NBQ0Y7QUFoQ0QsMERBZ0NDO0FBQ0QsaUNBQVcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFBIn0=