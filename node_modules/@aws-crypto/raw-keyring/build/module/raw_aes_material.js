/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Here I am reusing the Material implementation and interface from material-management.
 * This is because there are many security guarantees that this implementations offer
 * that map to the current implementation of raw AES keyrings.
 * The KeyringTrace is an unfortunate case because there is no mapping.
 * However the trade off seems worth it and the convolutions to make it work seem minimal.
 */
import { // eslint-disable-line no-unused-vars
decorateCryptographicMaterial, decorateWebCryptoMaterial, frozenClass, NodeAlgorithmSuite, WebCryptoAlgorithmSuite, // eslint-disable-line no-unused-vars
KeyringTraceFlag, needs } from '@aws-crypto/material-management';
import { // eslint-disable-line no-unused-vars
RawAesWrappingSuiteIdentifier } from './raw_aes_algorithm_suite';
export class NodeRawAesMaterial {
    constructor(suiteId) {
        this.keyringTrace = [];
        this.encryptionContext = Object.freeze({});
        /* Precondition: NodeRawAesMaterial suiteId must be RawAesWrappingSuiteIdentifier. */
        needs(RawAesWrappingSuiteIdentifier[suiteId], 'suiteId not supported.');
        this.suite = new NodeAlgorithmSuite(suiteId);
        /* NodeRawAesMaterial need to set a flag, this is an abuse of TraceFlags
         * because the material is not generated.
         * but CryptographicMaterial force a flag to be set.
         */
        const setFlags = KeyringTraceFlag.WRAPPING_KEY_GENERATED_DATA_KEY;
        decorateCryptographicMaterial(this, setFlags);
        Object.setPrototypeOf(this, NodeRawAesMaterial.prototype);
        Object.freeze(this);
    }
    hasValidKey() {
        return this.hasUnencryptedDataKey;
    }
}
frozenClass(NodeRawAesMaterial);
export class WebCryptoRawAesMaterial {
    constructor(suiteId) {
        this.keyringTrace = [];
        this.encryptionContext = Object.freeze({});
        /* Precondition: WebCryptoAlgorithmSuite suiteId must be RawAesWrappingSuiteIdentifier. */
        needs(RawAesWrappingSuiteIdentifier[suiteId], 'suiteId not supported.');
        this.suite = new WebCryptoAlgorithmSuite(suiteId);
        this.validUsages = Object.freeze(['decrypt', 'encrypt']);
        /* WebCryptoRawAesMaterial need to set a flag, this is an abuse of TraceFlags
         * because the material is not generated.
         * but CryptographicMaterial force a flag to be set.
         */
        const setFlag = KeyringTraceFlag.WRAPPING_KEY_GENERATED_DATA_KEY;
        decorateCryptographicMaterial(this, setFlag);
        decorateWebCryptoMaterial(this, setFlag);
        Object.setPrototypeOf(this, WebCryptoRawAesMaterial.prototype);
        Object.freeze(this);
    }
    hasValidKey() {
        return this.hasUnencryptedDataKey && this.hasCryptoKey;
    }
}
frozenClass(WebCryptoRawAesMaterial);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF3X2Flc19tYXRlcmlhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yYXdfYWVzX21hdGVyaWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0dBYUc7QUFFSDs7Ozs7R0FLRztBQUVILE9BQU8sRUFHa0IscUNBQXFDO0FBQzVELDZCQUE2QixFQUM3Qix5QkFBeUIsRUFDekIsV0FBVyxFQUNYLGtCQUFrQixFQUNsQix1QkFBdUIsRUFJVCxxQ0FBcUM7QUFDbkQsZ0JBQWdCLEVBQ2hCLEtBQUssRUFFTixNQUFNLGlDQUFpQyxDQUFBO0FBRXhDLE9BQU8sRUFDb0IscUNBQXFDO0FBQzlELDZCQUE2QixFQUM5QixNQUFNLDJCQUEyQixDQUFBO0FBRWxDLE1BQU0sT0FBTyxrQkFBa0I7SUFTN0IsWUFBYSxPQUFnQztRQUY3QyxpQkFBWSxHQUFtQixFQUFFLENBQUE7UUFDakMsc0JBQWlCLEdBQXNCLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7UUFFdEQscUZBQXFGO1FBQ3JGLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxPQUFPLENBQUMsRUFBRSx3QkFBd0IsQ0FBQyxDQUFBO1FBQ3ZFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUM1Qzs7O1dBR0c7UUFDSCxNQUFNLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQywrQkFBK0IsQ0FBQTtRQUNqRSw2QkFBNkIsQ0FBcUIsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ2pFLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3pELE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDckIsQ0FBQztJQUNELFdBQVc7UUFDVCxPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQTtJQUNuQyxDQUFDO0NBQ0Y7QUFDRCxXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtBQUUvQixNQUFNLE9BQU8sdUJBQXVCO0lBY2xDLFlBQWEsT0FBZ0M7UUFON0MsaUJBQVksR0FBbUIsRUFBRSxDQUFBO1FBS2pDLHNCQUFpQixHQUFzQixNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBRXRELDBGQUEwRjtRQUMxRixLQUFLLENBQUMsNkJBQTZCLENBQUMsT0FBTyxDQUFDLEVBQUUsd0JBQXdCLENBQUMsQ0FBQTtRQUN2RSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksdUJBQXVCLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDakQsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQW9CLFNBQVMsRUFBcUIsU0FBUyxDQUFDLENBQUMsQ0FBQTtRQUM5Rjs7O1dBR0c7UUFDSCxNQUFNLE9BQU8sR0FBRyxnQkFBZ0IsQ0FBQywrQkFBK0IsQ0FBQTtRQUNoRSw2QkFBNkIsQ0FBMEIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQ3JFLHlCQUF5QixDQUEwQixJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFDakUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsdUJBQXVCLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDOUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNyQixDQUFDO0lBQ0QsV0FBVztRQUNULE9BQU8sSUFBSSxDQUFDLHFCQUFxQixJQUFJLElBQUksQ0FBQyxZQUFZLENBQUE7SUFDeEQsQ0FBQztDQUNGO0FBQ0QsV0FBVyxDQUFDLHVCQUF1QixDQUFDLENBQUEifQ==