import { KmsClientSupplier } from './kms_client_supplier';
import { AwsEsdkKMSInterface, // eslint-disable-line no-unused-vars
RequiredGenerateDataKeyResponse, // eslint-disable-line no-unused-vars
RequiredEncryptResponse, // eslint-disable-line no-unused-vars
RequiredDecryptResponse } from './kms_types';
import { EncryptionContext, // eslint-disable-line no-unused-vars
EncryptedDataKey } from '@aws-crypto/material-management';
export declare const KMS_PROVIDER_ID = "aws-kms";
export declare function generateDataKey<Client extends AwsEsdkKMSInterface>(clientProvider: KmsClientSupplier<Client>, NumberOfBytes: number, KeyId: string, EncryptionContext: EncryptionContext, GrantTokens?: string[]): Promise<RequiredGenerateDataKeyResponse | false>;
export declare function encrypt<Client extends AwsEsdkKMSInterface>(clientProvider: KmsClientSupplier<Client>, Plaintext: Uint8Array, KeyId: string, EncryptionContext: EncryptionContext, GrantTokens?: string[]): Promise<RequiredEncryptResponse | false>;
export declare function decrypt<Client extends AwsEsdkKMSInterface>(clientProvider: KmsClientSupplier<Client>, { providerId, providerInfo, encryptedDataKey }: EncryptedDataKey, EncryptionContext: EncryptionContext, GrantTokens?: string[]): Promise<RequiredDecryptResponse | false>;
export declare function kmsResponseToEncryptedDataKey({ KeyId: providerInfo, CiphertextBlob: encryptedDataKey }: RequiredEncryptResponse): EncryptedDataKey;
//# sourceMappingURL=helpers.d.ts.map