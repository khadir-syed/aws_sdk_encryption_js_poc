/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { regionFromKmsKeyArn } from './region_from_kms_key_arn';
import { // eslint-disable-line no-unused-vars
EncryptedDataKey, // eslint-disable-line no-unused-vars
needs } from '@aws-crypto/material-management'; // eslint-disable-line no-unused-vars
export const KMS_PROVIDER_ID = 'aws-kms';
export async function generateDataKey(clientProvider, NumberOfBytes, KeyId, EncryptionContext, GrantTokens) {
    const region = regionFromKmsKeyArn(KeyId);
    const client = clientProvider(region);
    /* Check for early return (Postcondition): clientProvider did not return a client for generateDataKey. */
    if (!client)
        return false;
    const v2vsV3Response = client.generateDataKey({ KeyId, GrantTokens, NumberOfBytes, EncryptionContext });
    const v2vsV3Promise = 'promise' in v2vsV3Response
        ? v2vsV3Response.promise()
        : v2vsV3Response;
    const dataKey = await v2vsV3Promise;
    return safeGenerateDataKey(dataKey);
}
export async function encrypt(clientProvider, Plaintext, KeyId, EncryptionContext, GrantTokens) {
    const region = regionFromKmsKeyArn(KeyId);
    const client = clientProvider(region);
    /* Check for early return (Postcondition): clientProvider did not return a client for encrypt. */
    if (!client)
        return false;
    const v2vsV3Response = client.encrypt({ KeyId, Plaintext, EncryptionContext, GrantTokens });
    const v2vsV3Promise = 'promise' in v2vsV3Response
        ? v2vsV3Response.promise()
        : v2vsV3Response;
    const kmsEDK = await v2vsV3Promise;
    return safeEncryptOutput(kmsEDK);
}
export async function decrypt(clientProvider, { providerId, providerInfo, encryptedDataKey }, EncryptionContext, GrantTokens) {
    /* Precondition:  The EDK must be a KMS edk. */
    needs(providerId === KMS_PROVIDER_ID, 'Unsupported providerId');
    const region = regionFromKmsKeyArn(providerInfo);
    const client = clientProvider(region);
    /* Check for early return (Postcondition): clientProvider did not return a client for decrypt. */
    if (!client)
        return false;
    const v2vsV3Response = client.decrypt({ CiphertextBlob: encryptedDataKey, EncryptionContext, GrantTokens });
    const v2vsV3Promise = 'promise' in v2vsV3Response
        ? v2vsV3Response.promise()
        : v2vsV3Response;
    const dataKey = await v2vsV3Promise;
    return safeDecryptOutput(dataKey);
}
export function kmsResponseToEncryptedDataKey({ KeyId: providerInfo, CiphertextBlob: encryptedDataKey }) {
    return new EncryptedDataKey({ providerId: KMS_PROVIDER_ID, providerInfo, encryptedDataKey });
}
function safeGenerateDataKey(dataKey) {
    /* Postcondition: KMS must return serializable generate data key. */
    needs(typeof dataKey.KeyId === 'string' &&
        dataKey.Plaintext instanceof Uint8Array &&
        dataKey.CiphertextBlob instanceof Uint8Array, 'Malformed KMS response.');
    return safePlaintext(dataKey);
}
function safeEncryptOutput(dataKey) {
    /* Postcondition: KMS must return serializable encrypted data key. */
    needs(typeof dataKey.KeyId === 'string' &&
        dataKey.CiphertextBlob instanceof Uint8Array, 'Malformed KMS response.');
    return dataKey;
}
function safeDecryptOutput(dataKey) {
    /* Postcondition: KMS must return usable decrypted key. */
    needs(typeof dataKey.KeyId === 'string' &&
        dataKey.Plaintext instanceof Uint8Array, 'Malformed KMS response.');
    return safePlaintext(dataKey);
}
function safePlaintext(dataKey) {
    /* The KMS Client *may* return a Buffer that is not isolated.
     * i.e. the byteOffset !== 0.
     * This means that the unencrypted data key is possibly accessible to someone else.
     * If this is the node shared Buffer, then other code within this process _could_ find this secret.
     * Copy Plaintext to an isolated ArrayBuffer and zero the Plaintext.
     * This means that this function will *always* zero out the value returned to it from the KMS client.
     * While this is safe to do here, copying this code somewhere else may produce unexpected results.
     */
    const { Plaintext } = dataKey;
    dataKey.Plaintext = new Uint8Array(Plaintext);
    Plaintext.fill(0);
    return dataKey;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0dBYUc7QUFZSCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQTtBQUMvRCxPQUFPLEVBQ2MscUNBQXFDO0FBQ3hELGdCQUFnQixFQUFFLHFDQUFxQztBQUN2RCxLQUFLLEVBQ04sTUFBTSxpQ0FBaUMsQ0FBQSxDQUFDLHFDQUFxQztBQUU5RSxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFBO0FBRXhDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsZUFBZSxDQUNuQyxjQUF5QyxFQUN6QyxhQUFxQixFQUNyQixLQUFhLEVBQ2IsaUJBQW9DLEVBQ3BDLFdBQXNCO0lBRXRCLE1BQU0sTUFBTSxHQUFHLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3pDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUVyQyx5R0FBeUc7SUFDekcsSUFBSSxDQUFDLE1BQU07UUFBRSxPQUFPLEtBQUssQ0FBQTtJQUN6QixNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxDQUFBO0lBQ3ZHLE1BQU0sYUFBYSxHQUFHLFNBQVMsSUFBSSxjQUFjO1FBQy9DLENBQUMsQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFO1FBQzFCLENBQUMsQ0FBQyxjQUFjLENBQUE7SUFDbEIsTUFBTSxPQUFPLEdBQUcsTUFBTSxhQUFhLENBQUE7SUFFbkMsT0FBTyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUNyQyxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxPQUFPLENBQzNCLGNBQXlDLEVBQ3pDLFNBQXFCLEVBQ3JCLEtBQWEsRUFDYixpQkFB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