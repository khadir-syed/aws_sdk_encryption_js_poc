"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const region_from_kms_key_arn_1 = require("./region_from_kms_key_arn");
const material_management_1 = require("@aws-crypto/material-management"); // eslint-disable-line no-unused-vars
exports.KMS_PROVIDER_ID = 'aws-kms';
async function generateDataKey(clientProvider, NumberOfBytes, KeyId, EncryptionContext, GrantTokens) {
    const region = region_from_kms_key_arn_1.regionFromKmsKeyArn(KeyId);
    const client = clientProvider(region);
    /* Check for early return (Postcondition): clientProvider did not return a client for generateDataKey. */
    if (!client)
        return false;
    const v2vsV3Response = client.generateDataKey({ KeyId, GrantTokens, NumberOfBytes, EncryptionContext });
    const v2vsV3Promise = 'promise' in v2vsV3Response
        ? v2vsV3Response.promise()
        : v2vsV3Response;
    const dataKey = await v2vsV3Promise;
    return safeGenerateDataKey(dataKey);
}
exports.generateDataKey = generateDataKey;
async function encrypt(clientProvider, Plaintext, KeyId, EncryptionContext, GrantTokens) {
    const region = region_from_kms_key_arn_1.regionFromKmsKeyArn(KeyId);
    const client = clientProvider(region);
    /* Check for early return (Postcondition): clientProvider did not return a client for encrypt. */
    if (!client)
        return false;
    const v2vsV3Response = client.encrypt({ KeyId, Plaintext, EncryptionContext, GrantTokens });
    const v2vsV3Promise = 'promise' in v2vsV3Response
        ? v2vsV3Response.promise()
        : v2vsV3Response;
    const kmsEDK = await v2vsV3Promise;
    return safeEncryptOutput(kmsEDK);
}
exports.encrypt = encrypt;
async function decrypt(clientProvider, { providerId, providerInfo, encryptedDataKey }, EncryptionContext, GrantTokens) {
    /* Precondition:  The EDK must be a KMS edk. */
    material_management_1.needs(providerId === exports.KMS_PROVIDER_ID, 'Unsupported providerId');
    const region = region_from_kms_key_arn_1.regionFromKmsKeyArn(providerInfo);
    const client = clientProvider(region);
    /* Check for early return (Postcondition): clientProvider did not return a client for decrypt. */
    if (!client)
        return false;
    const v2vsV3Response = client.decrypt({ CiphertextBlob: encryptedDataKey, EncryptionContext, GrantTokens });
    const v2vsV3Promise = 'promise' in v2vsV3Response
        ? v2vsV3Response.promise()
        : v2vsV3Response;
    const dataKey = await v2vsV3Promise;
    return safeDecryptOutput(dataKey);
}
exports.decrypt = decrypt;
function kmsResponseToEncryptedDataKey({ KeyId: providerInfo, CiphertextBlob: encryptedDataKey }) {
    return new material_management_1.EncryptedDataKey({ providerId: exports.KMS_PROVIDER_ID, providerInfo, encryptedDataKey });
}
exports.kmsResponseToEncryptedDataKey = kmsResponseToEncryptedDataKey;
function safeGenerateDataKey(dataKey) {
    /* Postcondition: KMS must return serializable generate data key. */
    material_management_1.needs(typeof dataKey.KeyId === 'string' &&
        dataKey.Plaintext instanceof Uint8Array &&
        dataKey.CiphertextBlob instanceof Uint8Array, 'Malformed KMS response.');
    return safePlaintext(dataKey);
}
function safeEncryptOutput(dataKey) {
    /* Postcondition: KMS must return serializable encrypted data key. */
    material_management_1.needs(typeof dataKey.KeyId === 'string' &&
        dataKey.CiphertextBlob instanceof Uint8Array, 'Malformed KMS response.');
    return dataKey;
}
function safeDecryptOutput(dataKey) {
    /* Postcondition: KMS must return usable decrypted key. */
    material_management_1.needs(typeof dataKey.KeyId === 'string' &&
        dataKey.Plaintext instanceof Uint8Array, 'Malformed KMS response.');
    return safePlaintext(dataKey);
}
function safePlaintext(dataKey) {
    /* The KMS Client *may* return a Buffer that is not isolated.
     * i.e. the byteOffset !== 0.
     * This means that the unencrypted data key is possibly accessible to someone else.
     * If this is the node shared Buffer, then other code within this process _could_ find this secret.
     * Copy Plaintext to an isolated ArrayBuffer and zero the Plaintext.
     * This means that this function will *always* zero out the value returned to it from the KMS client.
     * While this is safe to do here, copying this code somewhere else may produce unexpected results.
     */
    const { Plaintext } = dataKey;
    dataKey.Plaintext = new Uint8Array(Plaintext);
    Plaintext.fill(0);
    return dataKey;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7OztHQWFHOztBQVlILHVFQUErRDtBQUMvRCx5RUFJd0MsQ0FBQyxxQ0FBcUM7QUFFakUsUUFBQSxlQUFlLEdBQUcsU0FBUyxDQUFBO0FBRWpDLEtBQUssVUFBVSxlQUFlLENBQ25DLGNBQXlDLEVBQ3pDLGFBQXFCLEVBQ3JCLEtBQWEsRUFDYixpQkFBb0MsRUFDcEMsV0FBc0I7SUFFdEIsTUFBTSxNQUFNLEdBQUcsNkNBQW1CLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDekMsTUFBTSxNQUFNLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBRXJDLHlHQUF5RztJQUN6RyxJQUFJLENBQUMsTUFBTTtRQUFFLE9BQU8sS0FBSyxDQUFBO0lBQ3pCLE1BQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUE7SUFDdkcsTUFBTSxhQUFhLEdBQUcsU0FBUyxJQUFJLGNBQWM7UUFDL0MsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUU7UUFDMUIsQ0FBQyxDQUFDLGNBQWMsQ0FBQTtJQUNsQixNQUFNLE9BQU8sR0FBRyxNQUFNLGFBQWEsQ0FBQTtJQUVuQyxPQUFPLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBQ3JDLENBQUM7QUFuQkQsMENBbUJDO0FBRU0sS0FBSyxVQUFVLE9BQU8sQ0FDM0IsY0FBeUMsRUFDekMsU0FBcUIsRUFDckIsS0FBYSxFQUNiLGlCQUFvQyxFQUNwQyxXQUFzQjtJQUV0QixNQUFNLE1BQU0sR0FBRyw2Q0FBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN6QyxNQUFNLE1BQU0sR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUE7SUFFckMs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