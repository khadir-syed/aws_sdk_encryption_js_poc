"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const material_management_1 = require("@aws-crypto/material-management");
const helpers_1 = require("./helpers");
const region_from_kms_key_arn_1 = require("./region_from_kms_key_arn");
function KmsKeyringClass(BaseKeyring) {
    class KmsKeyring extends BaseKeyring {
        constructor({ clientProvider, generatorKeyId, keyIds = [], grantTokens, discovery }) {
            super();
            /* Precondition: This is an abstract class. (But TypeScript does not have a clean way to model this) */
            material_management_1.needs(this.constructor !== KmsKeyring, 'new KmsKeyring is not allowed');
            /* Precondition: A noop KmsKeyring is not allowed. */
            material_management_1.needs(!(!discovery && !generatorKeyId && !keyIds.length), 'Noop keyring is not allowed: Set a keyId or discovery');
            /* Precondition: A keyring can be either a Discovery or have keyIds configured. */
            material_management_1.needs(!(discovery && (generatorKeyId || keyIds.length)), 'A keyring can be either a Discovery or have keyIds configured.');
            /* Precondition: All KMS key arns must be valid. */
            material_management_1.needs(!generatorKeyId || !!region_from_kms_key_arn_1.regionFromKmsKeyArn(generatorKeyId), 'Malformed arn.');
            material_management_1.needs(keyIds.every(keyarn => !!region_from_kms_key_arn_1.regionFromKmsKeyArn(keyarn)), 'Malformed arn.');
            /* Precondition: clientProvider needs to be a callable function. */
            material_management_1.needs(typeof clientProvider === 'function', 'Missing clientProvider');
            material_management_1.readOnlyProperty(this, 'clientProvider', clientProvider);
            material_management_1.readOnlyProperty(this, 'keyIds', Object.freeze(keyIds.slice()));
            material_management_1.readOnlyProperty(this, 'generatorKeyId', generatorKeyId);
            material_management_1.readOnlyProperty(this, 'grantTokens', grantTokens);
            material_management_1.readOnlyProperty(this, 'isDiscovery', !!discovery);
        }
        /* Keyrings *must* preserve the order of EDK's.  The generatorKeyId is the first on this list. */
        async _onEncrypt(material) {
            /* Check for early return (Postcondition): Discovery Keyrings do not encrypt. */
            if (this.isDiscovery)
                return material;
            const keyIds = this.keyIds.slice();
            const { clientProvider, generatorKeyId, grantTokens } = this;
            if (generatorKeyId && !material.hasUnencryptedDataKey) {
                const dataKey = await helpers_1.generateDataKey(clientProvider, material.suite.keyLengthBytes, generatorKeyId, material.encryptionContext, grantTokens);
                /* Precondition: A generatorKeyId must generate if we do not have an unencrypted data key.
                * Client supplier is allowed to return undefined if, for example, user wants to exclude particular
                * regions. But if we are here it means that user configured keyring with a KMS key that was
                * incompatible with the client supplier in use.
                */
                if (!dataKey)
                    throw new Error('Generator KMS key did not generate a data key');
                const flags = material_management_1.KeyringTraceFlag.WRAPPING_KEY_GENERATED_DATA_KEY |
                    material_management_1.KeyringTraceFlag.WRAPPING_KEY_SIGNED_ENC_CTX |
                    material_management_1.KeyringTraceFlag.WRAPPING_KEY_ENCRYPTED_DATA_KEY;
                const trace = { keyNamespace: helpers_1.KMS_PROVIDER_ID, keyName: dataKey.KeyId, flags };
                material
                    /* Postcondition: The generated unencryptedDataKey length must match the algorithm specification.
                    * See cryptographic_materials as setUnencryptedDataKey will throw in this case.
                    */
                    .setUnencryptedDataKey(dataKey.Plaintext, trace)
                    .addEncryptedDataKey(helpers_1.kmsResponseToEncryptedDataKey(dataKey), material_management_1.KeyringTraceFlag.WRAPPING_KEY_ENCRYPTED_DATA_KEY | material_management_1.KeyringTraceFlag.WRAPPING_KEY_SIGNED_ENC_CTX);
            }
            else if (generatorKeyId) {
                keyIds.unshift(generatorKeyId);
            }
            /* Precondition: If a generator does not exist, an unencryptedDataKey *must* already exist.
            * Furthermore *only* CMK's explicitly designated as generators can generate data keys.
            * See cryptographic_materials as getUnencryptedDataKey will throw in this case.
            */
            const unencryptedDataKey = material_management_1.unwrapDataKey(material.getUnencryptedDataKey());
            const flags = material_management_1.KeyringTraceFlag.WRAPPING_KEY_ENCRYPTED_DATA_KEY | material_management_1.KeyringTraceFlag.WRAPPING_KEY_SIGNED_ENC_CTX;
            for (const kmsKey of keyIds) {
                const kmsEDK = await helpers_1.encrypt(clientProvider, unencryptedDataKey, kmsKey, material.encryptionContext, grantTokens);
                /* clientProvider may not return a client, in this case there is not an EDK to add */
                if (kmsEDK)
                    material.addEncryptedDataKey(helpers_1.kmsResponseToEncryptedDataKey(kmsEDK), flags);
            }
            return material;
        }
        async _onDecrypt(material, encryptedDataKeys) {
            const keyIds = this.keyIds.slice();
            const { clientProvider, generatorKeyId, grantTokens } = this;
            if (generatorKeyId)
                keyIds.unshift(generatorKeyId);
            /* If there are no key IDs in the list, keyring is in "discovery" mode and will attempt KMS calls with
            * every ARN it comes across in the message. If there are key IDs in the list, it will cross check the
            * ARN it reads with that list before attempting KMS calls. Note that if caller provided key IDs in
            * anything other than a CMK ARN format, the Encryption SDK will not attempt to decrypt those data keys, because
            * the EDK data format always specifies the CMK with the full (non-alias) ARN.
            */
            const decryptableEDKs = encryptedDataKeys
                .filter(({ providerId, providerInfo }) => {
                if (providerId !== helpers_1.KMS_PROVIDER_ID)
                    return false;
                /* Discovery keyrings can not have keyIds configured,
                 * and non-discovery keyrings must have keyIds configured.
                 */
                return this.isDiscovery || keyIds.includes(providerInfo);
            });
            let cmkErrors = [];
            for (const edk of decryptableEDKs) {
                let dataKey = false;
                try {
                    dataKey = await helpers_1.decrypt(clientProvider, edk, material.encryptionContext, grantTokens);
                }
                catch (e) {
                    /* Failures onDecrypt should not short-circuit the process
                     * If the caller does not have access they may have access
                     * through another Keyring.
                     */
                    cmkErrors.push(e);
                }
                /* Check for early return (Postcondition): clientProvider may not return a client. */
                if (!dataKey)
                    continue;
                /* Postcondition: The KeyId from KMS must match the encoded KeyID. */
                material_management_1.needs(dataKey.KeyId === edk.providerInfo, 'KMS Decryption key does not match serialized provider.');
                const flags = material_management_1.KeyringTraceFlag.WRAPPING_KEY_DECRYPTED_DATA_KEY | material_management_1.KeyringTraceFlag.WRAPPING_KEY_VERIFIED_ENC_CTX;
                const trace = { keyNamespace: helpers_1.KMS_PROVIDER_ID, keyName: dataKey.KeyId, flags };
                /* Postcondition: The decrypted unencryptedDataKey length must match the algorithm specification.
                  * See cryptographic_materials as setUnencryptedDataKey will throw in this case.
                  */
                material.setUnencryptedDataKey(dataKey.Plaintext, trace);
                return material;
            }
            /* Postcondition: A CMK must provide a valid data key or KMS must not have raised any errors.
             * If I have a data key,
             * decrypt errors can be ignored.
             * However, if I was unable to decrypt a data key AND I have errors,
             * these errors should bubble up.
             * Otherwise, the only error customers will see is that
             * the material does not have an unencrypted data key.
             * So I return a concatenated Error message
             */
            material_management_1.needs(material.hasValidKey() || (!material.hasValidKey() && !cmkErrors.length), cmkErrors
                .reduce((m, e, i) => `${m} Error #${i + 1} \n ${e.stack} \n`, 'Unable to decrypt data key and one or more KMS CMKs had an error. \n '));
            return material;
        }
    }
    material_management_1.immutableClass(KmsKeyring);
    return KmsKeyring;
}
exports.KmsKeyringClass = KmsKeyringClass;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia21zX2tleXJpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMva21zX2tleXJpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7O0dBYUc7O0FBT0gseUVBWXdDO0FBQ3hDLHVDQUE2RztBQUM3Ryx1RUFBK0Q7QUE0Qi9ELFNBQWdCLGVBQWUsQ0FDN0IsV0FBb0M7SUFFcEMsTUFBTSxVQUFXLFNBQVEsV0FBVztRQU9sQyxZQUFhLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxNQUFNLEdBQUcsRUFBRSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQTJCO1lBQzNHLEtBQUssRUFBRSxDQUFBO1lBQ1AsdUdBQXVHO1lBQ3ZHLDJCQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsS0FBSyxVQUFVLEVBQUUsK0JBQStCLENBQUMsQ0FBQTtZQUN2RSxxREFBcUQ7WUFDckQsMkJBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLElBQUksQ0FBQyxjQUFjLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsdURBQXVELENBQUMsQ0FBQTtZQUNsSCxrRkFBa0Y7WUFDbEYsMkJBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxJQUFJLENBQUMsY0FBYyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLGdFQUFnRSxDQUFDLENBQUE7WUFDMUgsbURBQW1EO1lBQ25ELDJCQUFLLENBQUMsQ0FBQyxjQUFjLElBQUksQ0FBQyxDQUFDLDZDQUFtQixDQUFDLGNBQWMsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLENBQUE7WUFDakYsMkJBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLDZDQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQTtZQUM5RSxtRUFBbUU7WUFDbkUsMkJBQUssQ0FBQyxPQUFPLGNBQWMsS0FBSyxVQUFV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