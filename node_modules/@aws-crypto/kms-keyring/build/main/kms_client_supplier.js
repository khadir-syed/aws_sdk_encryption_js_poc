"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const material_management_1 = require("@aws-crypto/material-management");
function getClient(KMSClient, defaultConfig) {
    return function getKmsClient(region) {
        /* a KMS alias is supported.  These do not have a region
         * in this case, the Encryption SDK should find the default region
         * or the default region needs to be supplied to this function
         */
        const config = { ...defaultConfig, region };
        const client = new KMSClient(config);
        /* Postcondition: A region must be configured.
         * The AWS SDK has a process for determining the default region.
         * A user can configure a default region by setting it in `defaultConfig`
         * But KMS requires a region to operate.
         */
        // @ts-ignore the V3 client has set the config to protected, reasonable, but I need to know...
        material_management_1.needs(client.config.region, 'A region is required');
        return client;
    };
}
exports.getClient = getClient;
function limitRegions(regions, getClient) {
    /* Precondition: limitRegions requires that region be a string. */
    material_management_1.needs(regions.every(r => !!r && typeof r === 'string'), 'Can only limit on region strings');
    return (region) => {
        if (!regions.includes(region))
            return false;
        return getClient(region);
    };
}
exports.limitRegions = limitRegions;
function excludeRegions(regions, getClient) {
    /* Precondition: excludeRegions requires region be a string. */
    material_management_1.needs(regions.every(r => !!r && typeof r === 'string'), 'Can only exclude on region strings');
    return (region) => {
        if (regions.includes(region))
            return false;
        return getClient(region);
    };
}
exports.excludeRegions = excludeRegions;
function cacheClients(getClient) {
    const clientsCache = {};
    return (region) => {
        // Do not cache until KMS has been responded in the given region
        if (!clientsCache.hasOwnProperty(region))
            return deferCache(clientsCache, region, getClient(region));
        return clientsCache[region];
    };
}
exports.cacheClients = cacheClients;
/* It is possible that a malicious user can attempt a local resource
 * DOS by sending ciphertext with a large number of spurious regions.
 * This will fill the cache with regions and exhaust resources.
 * To avoid this, a call succeeds in contacting KMS.
 * This does *not* mean that this call is successful,
 * only that the region is backed by a functional KMS service.
 */
function deferCache(clientsCache, region, client) {
    /* Check for early return (Postcondition): No client, then I cache false and move on. */
    if (!client) {
        clientsCache[region] = false;
        return false;
    }
    const { encrypt, decrypt, generateDataKey } = client;
    return ['encrypt', 'decrypt', 'generateDataKey'].reduce(wrapOperation, client);
    /* Wrap each of the operations to cache the client on response */
    function wrapOperation(client, name) {
        const original = client[name];
        client[name] = function wrappedOperation(args) {
            // @ts-ignore (there should be a TypeScript solution for this)
            const v2vsV3Response = original.call(client, args);
            const v2vsV3Promise = 'promise' in v2vsV3Response
                ? v2vsV3Response.promise()
                : v2vsV3Response;
            return v2vsV3Promise
                .then((response) => {
                clientsCache[region] = Object.assign(client, { encrypt, decrypt, generateDataKey });
                return response;
            })
                .catch((e) => {
                /* Errors from a KMS contact mean that the region is "live".
                 * As such the client can be cached because the problem is not with the client per se,
                 * but with the request made.
                 */
                if (e.$metadata && e.$metadata.httpStatusCode) {
                    clientsCache[region] = Object.assign(client, { encrypt, decrypt, generateDataKey });
                }
                // The request was not successful
                return Promise.reject(e);
            });
        };
        return client;
    }
}
exports.deferCache = deferCache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia21zX2NsaWVudF9zdXBwbGllci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9rbXNfY2xpZW50X3N1cHBsaWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7OztHQWFHOztBQUVILHlFQUF1RDtBQW9CdkQsU0FBZ0IsU0FBUyxDQUN2QixTQUEyQyxFQUMzQyxhQUFzQjtJQUV0QixPQUFPLFNBQVMsWUFBWSxDQUFFLE1BQWM7UUFDMUM7OztXQUdHO1FBQ0gsTUFBTSxNQUFNLEdBQUcsRUFBRSxHQUFHLGFBQWEsRUFBRSxNQUFNLEVBQVksQ0FBQTtRQUNyRCxNQUFNLE1BQU0sR0FBRyxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUVwQzs7OztXQUlHO1FBQ0gsOEZBQThGO1FBQzlGLDJCQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsc0JBQXNCLENBQUMsQ0FBQTtRQUNuRCxPQUFPLE1BQU0sQ0FBQTtJQUNmLENBQUMsQ0FBQTtBQUNILENBQUM7QUFyQkQsOEJBcUJDO0FBRUQsU0FBZ0IsWUFBWSxDQUMxQixPQUFpQixFQUNqQixTQUFvQztJQUVwQyxrRUFBa0U7SUFDbEUsMkJBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLENBQUMsRUFBRSxrQ0FBa0MsQ0FBQyxDQUFBO0lBRTNGLE9BQU8sQ0FBQyxNQUFjLEVBQUUsRUFBRTtRQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFBRSxPQUFPLEtBQUssQ0FBQTtRQUMzQyxPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUMxQixDQUFDLENBQUE7QUFDSCxDQUFDO0FBWEQsb0NBV0M7QUFFRCxTQUFnQixjQUFjLENBQzVCLE9BQWlCLEVBQ2pCLFNBQW9DO0lBRXBD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