/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* WebCrypto expects the ECDSA signature to be "raw" formated.
 * e.g. concat(r,s) where r and s are padded to key length bytes.
 * The AWS Encryption SDK expects the signature to be DER encoded.
 * https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/message-format.html#footer-structure
 */
// @ts-ignore
import asn from 'asn1.js';
import { concatBuffers } from './concat_buffers';
import { needs } from '@aws-crypto/material-management';
// https://tools.ietf.org/html/rfc3279#section-2.2.2
const ECDSASignature = asn.define('ECDSASignature', function () {
    this.seq().obj(this.key('r').int(), this.key('s').int());
});
// Map the ECDSA Curve to key lengths
const keyLengthBytes = Object.freeze({
    'P-256': 32,
    'P-384': 48
});
/**
 * WebCrypto subtle.verify expect the signature to be "raw" formated e.g. concat(r,s)
 * where r and s are padded to the key length in bytes.
 *
 * @param derSignature [Uint8Array] The DER formated signature from an Encryption SDK formated blob
 * @param suite [WebCryptoAlgorithmSuite] The Algorithm suite used to create the signature
 * @returns Uint8Array The raw formated signature (r,s) used to verify in WebCrypto
 */
export function der2raw(derSignature, { signatureCurve }) {
    /* Precondition: Do not attempt to RAW format if the suite does not support signing. */
    if (!signatureCurve)
        throw new Error('AlgorithmSuite does not support signing');
    const _keyLengthBytes = keyLengthBytes[signatureCurve];
    // A little more portable than Buffer.from, but not much
    const { r, s } = ECDSASignature.decode(new asn.bignum.BN(derSignature).toArrayLike(Buffer), 'der');
    const rLength = r.byteLength();
    const sLength = r.byteLength();
    return concatBuffers(new Uint8Array(_keyLengthBytes - rLength), r.toArrayLike(Uint8Array), new Uint8Array(_keyLengthBytes - sLength), s.toArrayLike(Uint8Array));
}
/**
 * WebCrypto subtle.sign returns the signature "raw" formated e.g. concat(r,s)
 * where r and s are padded to the key length in bytes.
 * The Encryption SDK expects the signature to be DER encoded.
 *
 * @param rawSignature [Uint8Array] The "raw" formated signature from WebCrypto subtle.sign
 * @param suite [WebCryptoAlgorithmSuite] The Algorithm suite used to create the signature
 * @returns Uint8Array The DER formated signature
 */
export function raw2der(rawSignature, { signatureCurve }) {
    /* Precondition: Do not attempt to DER format if the suite does not support signing. */
    if (!signatureCurve)
        throw new Error('AlgorithmSuite does not support signing');
    const { byteLength } = rawSignature;
    const _keyLengthBytes = keyLengthBytes[signatureCurve];
    /* Precondition: The total raw signature length is twice the key length bytes. */
    needs(byteLength === 2 * _keyLengthBytes, 'Malformed signature.');
    /* A little more portable than Buffer.from, but not much.
     * DER encoding stores integers as signed values.
     * This means if the first bit is a 1,
     * the value will be interpreted as negative.
     * So an extra byte needs to be added on.
     * This is a problem because "raw" encoding is just r|s.
     * Without this "extra logic" a given DER signature `sig` *may*
     * raw2der(der2raw(sig)) !== sig
     * see: https://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf 8.3
     * All of this means that s and r **MUST** be passed as BN,
     * and NOT bytes.
     * Otherwise you need to interpret this padding yourself.
     */
    const r = new asn.bignum.BN(rawSignature.slice(0, _keyLengthBytes));
    const s = new asn.bignum.BN(rawSignature.slice(_keyLengthBytes));
    return ECDSASignature.encode({ r, s }, 'der');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWNkc2Ffc2lnbmF0dXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VjZHNhX3NpZ25hdHVyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztHQWFHO0FBRUg7Ozs7R0FJRztBQUVILGFBQWE7QUFDYixPQUFPLEdBQUcsTUFBTSxTQUFTLENBQUE7QUFDekIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBQ2hELE9BQU8sRUFDTCxLQUFLLEVBR04sTUFBTSxpQ0FBaUMsQ0FBQTtBQUV4QyxvREFBb0Q7QUFDcEQsTUFBTSxjQUFjLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRTtJQUNsRCxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUNaLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQ25CLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQ3BCLENBQUE7QUFDSCxDQUFDLENBQUMsQ0FBQTtBQUVGLHFDQUFxQztBQUNyQyxNQUFNLGNBQWMsR0FBMkMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUMzRSxPQUFPLEVBQUUsRUFBRTtJQUNYLE9BQU8sRUFBRSxFQUFFO0NBQ1osQ0FBQyxDQUFBO0FBRUY7Ozs7Ozs7R0FPRztBQUNILE1BQU0sVUFBVSxPQUFPLENBQUUsWUFBd0IsRUFBRSxFQUFFLGNBQWMsRUFBMkI7SUFDNUYsdUZBQXVGO0lBQ3ZGLElBQUksQ0FBQyxjQUFjO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFBO0lBRS9FLE1BQU0sZUFBZSxHQUFHLGNBQWMsQ0FBQyxjQUFjLENBQUMsQ0FBQTtJQUV0RCx3REFBd0Q7SUFDeEQsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBRWxHLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUM5QixNQUFNLE9BQU8sR0FBRyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUE7SUFFOUIsT0FBTyxhQUFhLENBQ2xCLElBQUksVUFBVSxDQUFDLGVBQWUsR0FBRyxPQUFPLENBQUMsRUFDekMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsRUFDekIsSUFBSSxVQUFVLENBQUMsZUFBZSxHQUFHLE9BQU8sQ0FBQyxFQUN6QyxDQUFDLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUMxQixDQUFBO0FBQ0gsQ0FBQztBQUVEOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxVQUFVLE9BQU8sQ0FBRSxZQUF3QixFQUFFLEVBQUUsY0FBYyxFQUEyQjtJQUM1Rix1RkFBdUY7SUFDdkYsSUFBSSxDQUFDLGNBQWM7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUE7SUFFL0UsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLFlBQVksQ0FBQTtJQUVuQyxNQUFNLGVBQWUsR0FBRyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUE7SUFFdEQsaUZBQWlGO0lBQ2pGLEtBQUssQ0FBQyxVQUFVLEtBQUssQ0FBQyxHQUFHLGVBQWUsRUFBRSxzQkFBc0IsQ0FBQyxDQUFBO0lBRWpFOzs7Ozs7Ozs7Ozs7T0FZRztJQUNILE1BQU0sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQTtJQUNuRSxNQUFNLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQTtJQUVoRSxPQUFPLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUE7QUFDL0MsQ0FBQyJ9