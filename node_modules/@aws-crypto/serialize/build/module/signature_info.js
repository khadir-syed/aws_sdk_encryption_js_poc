/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * This public interface for serializing the AWS Encryption SDK Message Footer Format
 * is provided for the use of the Encryption SDK for JavaScript only.  It can be used
 * as a reference but is not intended to be use by any packages other than the
 * Encryption SDK for JavaScript.
 *
 * See: https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/message-format.html#footer-structure
 */
import { concatBuffers } from './concat_buffers';
import { uInt16BE } from './uint_util';
import { needs } from '@aws-crypto/material-management';
export function serializeSignatureInfo(signature) {
    return concatBuffers(uInt16BE(signature.byteLength), signature);
}
export function deserializeSignature({ buffer, byteOffset, byteLength }) {
    /* Precondition: There must be information for a signature. */
    needs(byteLength, 'Invalid Signature');
    /* Uint8Array is a view on top of the underlying ArrayBuffer.
     * This means that raw underlying memory stored in the ArrayBuffer
     * may be larger than the Uint8Array.  This is especially true of
     * the Node.js Buffer object.  The offset and length *must* be
     * passed to the DataView otherwise I will get unexpected results.
     */
    const dataView = new DataView(buffer, byteOffset, byteLength);
    const signatureLength = dataView.getUint16(0, false); // big endian
    /* Precondition: The signature length must be positive. */
    needs(signatureLength > 0, 'Invalid Signature');
    /* Precondition: The data must match the serialized length. */
    needs(byteLength === signatureLength + 2, 'Invalid Signature');
    return new Uint8Array(buffer, byteOffset + 2, signatureLength);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmF0dXJlX2luZm8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2lnbmF0dXJlX2luZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUVIOzs7Ozs7O0dBT0c7QUFFSCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDaEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUN0QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0saUNBQWlDLENBQUE7QUFFdkQsTUFBTSxVQUFVLHNCQUFzQixDQUFFLFNBQXFCO0lBQzNELE9BQU8sYUFBYSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUE7QUFDakUsQ0FBQztBQUVELE1BQU0sVUFBVSxvQkFBb0IsQ0FBRSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFjO0lBQ2xGLDhEQUE4RDtJQUM5RCxLQUFLLENBQUMsVUFBVSxFQUFFLG1CQUFtQixDQUFDLENBQUE7SUFDdEM7Ozs7O09BS0c7SUFDSCxNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFBO0lBQzdELE1BQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFBLENBQUMsYUFBYTtJQUNsRSwwREFBMEQ7SUFDMUQsS0FBSyxDQUFDLGVBQWUsR0FBRyxDQUFDLEVBQUUsbUJBQW1CLENBQUMsQ0FBQTtJQUMvQyw4REFBOEQ7SUFDOUQsS0FBSyxDQUFDLFVBQVUsS0FBSyxlQUFlLEdBQUcsQ0FBQyxFQUFFLG1CQUFtQixDQUFDLENBQUE7SUFDOUQsT0FBTyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxHQUFHLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQTtBQUNoRSxDQUFDIn0=