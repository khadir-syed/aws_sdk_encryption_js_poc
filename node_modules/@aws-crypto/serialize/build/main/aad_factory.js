"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * This public interface for constructing the additional authenticated data (AAD)
 * is provided for the use of the Encryption SDK for JavaScript only.  It can be used
 * as a reference but is not intended to be use by any packages other than the
 * Encryption SDK for JavaScript.
 *
 * This AAD is used for the Body section
 * See: https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/body-aad-reference.html
 */
const bn_js_1 = __importDefault(require("bn.js"));
const identifiers_1 = require("./identifiers"); // eslint-disable-line no-unused-vars
const concat_buffers_1 = require("./concat_buffers");
const uint_util_1 = require("./uint_util");
function aadFactory(fromUtf8) {
    return {
        messageAADContentString,
        messageAAD
    };
    function messageAADContentString({ contentType, isFinalFrame }) {
        switch (contentType) {
            case identifiers_1.ContentType.NO_FRAMING:
                return identifiers_1.ContentAADString.NON_FRAMED_STRING_ID;
            case identifiers_1.ContentType.FRAMED_DATA:
                return isFinalFrame
                    ? identifiers_1.ContentAADString.FINAL_FRAME_STRING_ID
                    : identifiers_1.ContentAADString.FRAME_STRING_ID;
            default:
                throw new Error('Unrecognized content type');
        }
    }
    function messageAAD(messageId, aadContentString, seqNum, contentLength) {
        return concat_buffers_1.concatBuffers(messageId, fromUtf8(aadContentString), uint_util_1.uInt32BE(seqNum), new Uint8Array(new bn_js_1.default(contentLength).toArray('be', 8)));
    }
}
exports.aadFactory = aadFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWFkX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYWFkX2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7O0dBYUc7Ozs7O0FBRUg7Ozs7Ozs7O0dBUUc7QUFFSCxrREFBc0I7QUFDdEIsK0NBQTZELENBQUMscUNBQXFDO0FBRW5HLHFEQUFnRDtBQUNoRCwyQ0FBc0M7QUFFdEMsU0FBZ0IsVUFBVSxDQUFFLFFBQXVDO0lBQ2pFLE9BQU87UUFDTCx1QkFBdUI7UUFDdkIsVUFBVTtLQUNYLENBQUE7SUFFRCxTQUFTLHVCQUF1QixDQUFFLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBcUQ7UUFDaEgsUUFBUSxXQUFXLEVBQUU7WUFDbkIsS0FBSyx5QkFBVyxDQUFDLFVBQVU7Z0JBQ3pCLE9BQU8sOEJBQWdCLENBQUMsb0JBQW9CLENBQUE7WUFDOUMsS0FBSyx5QkFBVyxDQUFDLFdBQVc7Z0JBQzFCLE9BQU8sWUFBWTtvQkFDakIsQ0FBQyxDQUFDLDhCQUFnQixDQUFDLHFCQUFxQjtvQkFDeEMsQ0FBQyxDQUFDLDhCQUFnQixDQUFDLGVBQWUsQ0FBQTtZQUN0QztnQkFDRSxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUE7U0FDL0M7SUFDSCxDQUFDO0lBRUQsU0FBUyxVQUFVLENBQUUsU0FBcUIsRUFBRSxnQkFBa0MsRUFBRSxNQUFjLEVBQUUsYUFBcUI7UUFDbkgsT0FBTyw4QkFBYSxDQUNsQixTQUFTLEVBQ1QsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEVBQzFCLG9CQUFRLENBQUMsTUFBTSxDQUFDLEVBQ2hCLElBQUksVUFBVSxDQUFDLElBQUksZUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDdkQsQ0FBQTtJQUNILENBQUM7QUFDSCxDQUFDO0FBM0JELGdDQTJCQyJ9