"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * This public interface for serializing the AWS Encryption SDK Message Footer Format
 * is provided for the use of the Encryption SDK for JavaScript only.  It can be used
 * as a reference but is not intended to be use by any packages other than the
 * Encryption SDK for JavaScript.
 *
 * See: https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/message-format.html#footer-structure
 */
const concat_buffers_1 = require("./concat_buffers");
const uint_util_1 = require("./uint_util");
const material_management_1 = require("@aws-crypto/material-management");
function serializeSignatureInfo(signature) {
    return concat_buffers_1.concatBuffers(uint_util_1.uInt16BE(signature.byteLength), signature);
}
exports.serializeSignatureInfo = serializeSignatureInfo;
function deserializeSignature({ buffer, byteOffset, byteLength }) {
    /* Precondition: There must be information for a signature. */
    material_management_1.needs(byteLength, 'Invalid Signature');
    /* Uint8Array is a view on top of the underlying ArrayBuffer.
     * This means that raw underlying memory stored in the ArrayBuffer
     * may be larger than the Uint8Array.  This is especially true of
     * the Node.js Buffer object.  The offset and length *must* be
     * passed to the DataView otherwise I will get unexpected results.
     */
    const dataView = new DataView(buffer, byteOffset, byteLength);
    const signatureLength = dataView.getUint16(0, false); // big endian
    /* Precondition: The signature length must be positive. */
    material_management_1.needs(signatureLength > 0, 'Invalid Signature');
    /* Precondition: The data must match the serialized length. */
    material_management_1.needs(byteLength === signatureLength + 2, 'Invalid Signature');
    return new Uint8Array(buffer, byteOffset + 2, signatureLength);
}
exports.deserializeSignature = deserializeSignature;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmF0dXJlX2luZm8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2lnbmF0dXJlX2luZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7O0dBYUc7O0FBRUg7Ozs7Ozs7R0FPRztBQUVILHFEQUFnRDtBQUNoRCwyQ0FBc0M7QUFDdEMseUVBQXVEO0FBRXZELFNBQWdCLHNCQUFzQixDQUFFLFNBQXFCO0lBQzNELE9BQU8sOEJBQWEsQ0FBQyxvQkFBUSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQTtBQUNqRSxDQUFDO0FBRkQsd0RBRUM7QUFFRCxTQUFnQixvQkFBb0IsQ0FBRSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFjO0lBQ2xGLDhEQUE4RDtJQUM5RCwyQkFBSyxDQUFDLFVBQVUsRUFBRSxtQkFBbUIsQ0FBQyxDQUFBO0lBQ3RDOzs7OztPQUtHO0lBQ0gsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUM3RCxNQUFNLGVBQWUsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQSxDQUFDLGFBQWE7SUFDbEUsMERBQTBEO0lBQzFELDJCQUFLLENBQUMsZUFBZSxHQUFHLENBQUMsRUFBRSxtQkFBbUIsQ0FBQyxDQUFBO0lBQy9DLDhEQUE4RDtJQUM5RCwyQkFBSyxDQUFDLFVBQVUsS0FBSyxlQUFlLEdBQUcsQ0FBQyxFQUFFLG1CQUFtQixDQUFDLENBQUE7SUFDOUQsT0FBTyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxHQUFHLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQTtBQUNoRSxDQUFDO0FBaEJELG9EQWdCQyJ9