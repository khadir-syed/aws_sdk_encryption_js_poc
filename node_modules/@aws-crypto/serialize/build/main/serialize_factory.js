"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * This public interface for serializing the AWS Encryption SDK Message Header Format
 * is provided for the use of the Encryption SDK for JavaScript only.  It can be used
 * as a reference but is not intended to be use by any packages other than the
 * Encryption SDK for JavaScript.
 *
 * See: https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/message-format.html#header-structure
 */
const concat_buffers_1 = require("./concat_buffers");
const material_management_1 = require("@aws-crypto/material-management"); // eslint-disable-line no-unused-vars
const identifiers_1 = require("./identifiers");
const uint_util_1 = require("./uint_util");
function serializeFactory(fromUtf8) {
    return {
        frameIv,
        nonFramedBodyIv,
        headerAuthIv,
        frameHeader,
        finalFrameHeader,
        encodeEncryptionContext,
        serializeEncryptionContext,
        serializeEncryptedDataKeys,
        serializeEncryptedDataKey,
        serializeMessageHeader
    };
    function frameIv(ivLength, sequenceNumber) {
        /* Precondition: sequenceNumber must conform to the specification. i.e. 0 - (2^32 - 1) */
        material_management_1.needs(sequenceNumber > 0 && identifiers_1.SequenceIdentifier.SEQUENCE_NUMBER_END >= sequenceNumber, 'sequenceNumber out of bounds');
        const buff = new Uint8Array(ivLength);
        const view = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);
        view.setUint32(ivLength - 4, sequenceNumber, false); // big-endian
        return buff;
    }
    function nonFramedBodyIv(ivLength) {
        return frameIv(ivLength, 1);
    }
    function headerAuthIv(ivLength) {
        return new Uint8Array(ivLength); // new Uint8Array is 0 filled by default
    }
    function frameHeader(sequenceNumber, iv) {
        return concat_buffers_1.concatBuffers(uint_util_1.uInt32BE(sequenceNumber), iv);
    }
    function finalFrameHeader(sequenceNumber, iv, contentLength) {
        return concat_buffers_1.concatBuffers(uint_util_1.uInt32BE(identifiers_1.SequenceIdentifier.SEQUENCE_NUMBER_END), // Final Frame identifier
        uint_util_1.uInt32BE(sequenceNumber), iv, uint_util_1.uInt32BE(contentLength));
    }
    function encodeEncryptionContext(encryptionContext) {
        return Object
            .entries(encryptionContext)
            /* Precondition: The serialized encryption context entries must be sorted by UTF-8 key value. */
            .sort(([aKey], [bKey]) => aKey.localeCompare(bKey))
            .map(entries => entries.map(fromUtf8))
            .map(([key, value]) => concat_buffers_1.concatBuffers(uint_util_1.uInt16BE(key.byteLength), key, uint_util_1.uInt16BE(value.byteLength), value));
    }
    function serializeEncryptionContext(encryptionContext) {
        const encryptionContextElements = encodeEncryptionContext(encryptionContext);
        /* Check for early return (Postcondition): If there is no context then the length of the _whole_ serialized portion is 0.
         * This is part of the specification of the AWS Encryption SDK Message Format.
         * It is not 0 for length and 0 for count.  The count element is omitted.
         */
        if (!encryptionContextElements.length)
            return uint_util_1.uInt16BE(0);
        const aadData = concat_buffers_1.concatBuffers(uint_util_1.uInt16BE(encryptionContextElements.length), ...encryptionContextElements);
        const aadLength = uint_util_1.uInt16BE(aadData.byteLength);
        return concat_buffers_1.concatBuffers(aadLength, aadData);
    }
    function serializeEncryptedDataKeys(encryptedDataKeys) {
        const encryptedKeyInfo = encryptedDataKeys
            .map(serializeEncryptedDataKey);
        return concat_buffers_1.concatBuffers(uint_util_1.uInt16BE(encryptedDataKeys.length), ...encryptedKeyInfo);
    }
    function serializeEncryptedDataKey(edk) {
        const { providerId, providerInfo, encryptedDataKey, rawInfo } = edk;
        const providerIdBytes = fromUtf8(providerId);
        // The providerInfo is technically a binary field, so I prefer rawInfo
        const providerInfoBytes = rawInfo || fromUtf8(providerInfo);
        return concat_buffers_1.concatBuffers(uint_util_1.uInt16BE(providerIdBytes.byteLength), providerIdBytes, uint_util_1.uInt16BE(providerInfoBytes.byteLength), providerInfoBytes, uint_util_1.uInt16BE(encryptedDataKey.byteLength), encryptedDataKey);
    }
    function serializeMessageHeader(messageHeader) {
        return concat_buffers_1.concatBuffers(uint_util_1.uInt8(messageHeader.version), uint_util_1.uInt8(messageHeader.type), uint_util_1.uInt16BE(messageHeader.suiteId), messageHeader.messageId, serializeEncryptionContext(messageHeader.encryptionContext), serializeEncryptedDataKeys(messageHeader.encryptedDataKeys), new Uint8Array([messageHeader.contentType]), new Uint8Array([0, 0, 0, 0]), uint_util_1.uInt8(messageHeader.headerIvLength), uint_util_1.uInt32BE(messageHeader.frameLength));
    }
}
exports.serializeFactory = serializeFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXplX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2VyaWFsaXplX2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7O0dBYUc7O0FBRUg7Ozs7Ozs7R0FPRztBQUVILHFEQUFnRDtBQUNoRCx5RUFBc0csQ0FBQyxxQ0FBcUM7QUFDNUksK0NBQWtEO0FBQ2xELDJDQUF1RDtBQUd2RCxTQUFnQixnQkFBZ0IsQ0FBRSxRQUFvQztJQUNwRSxPQUFPO1FBQ0wsT0FBTztRQUNQLGVBQWU7UUFDZixZQUFZO1FBQ1osV0FBVztRQUNYLGdCQUFnQjtRQUNoQix1QkFBdUI7UUFDdkIsMEJBQTBCO1FBQzFCLDBCQUEwQjtRQUMxQix5QkFBeUI7UUFDekIsc0JBQXNCO0tBQ3ZCLENBQUE7SUFFRCxTQUFTLE9BQU8sQ0FBRSxRQUFrQixFQUFFLGNBQXNCO1FBQzFELHlGQUF5RjtRQUN6RiwyQkFBSyxDQUFDLGNBQWMsR0FBRyxDQUFDLElBQUksZ0NBQWtCLENBQUMsbUJBQW1CLElBQUksY0FBYyxFQUFFLDhCQUE4QixDQUFDLENBQUE7UUFFckgsTUFBTSxJQUFJLEdBQUcsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDckMsTUFBTSxJQUFJLEdBQUcsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUN4RSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxDQUFDLEVBQUUsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFBLENBQUMsYUFBYTtRQUNqRSxPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUFFRCxTQUFTLGVBQWUsQ0FBRSxRQUFrQjtRQUMxQyxPQUFPLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDN0IsQ0FBQztJQUVELFNBQVMsWUFBWSxD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