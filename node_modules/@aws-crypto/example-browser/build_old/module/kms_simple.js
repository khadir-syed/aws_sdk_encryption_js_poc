/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* This is a simple example of using a KMS Keyring
 * to encrypt and decrypt using the AWS Encryption SDK for Javascript in a browser.
 */
import { KmsKeyringBrowser, KMS, getClient, encrypt, decrypt } from '@aws-crypto/client-browser';
import { toBase64 } from '@aws-sdk/util-base64-browser';
/* This is done to facilitate testing. */
export async function testKmsSimpleExample() {
    /* A KMS CMK is required to generate the data key.
     * You need kms:GenerateDataKey permission on the CMK in generatorKeyId.
     */
    const generatorKeyId = 'arn:aws:kms:us-west-2:658956600833:alias/EncryptDecrypt';
    /* Adding alternate KMS keys that can decrypt.
     * Access to kms:Encrypt is required for every CMK in keyIds.
     * You might list several keys in different AWS Regions.
     * This allows you to decrypt the data in any of the represented Regions.
     * In this example, I am using the same CMK.
     * This is *only* to demonstrate how the CMK ARNs are configured.
     */
    const keyIds = ['arn:aws:kms:us-west-2:658956600833:key/b3537ef1-d8dc-4780-9f5a-55776cbb2f7f'];
    /* Need a client provider that will inject correct credentials.
     * The credentials here are injected by webpack from your environment bundle is created
     * The credential values are pulled using @aws-sdk/credential-provider-node.
     * See kms.webpack.config
     * You should inject your credential into the browser in a secure manner,
     * that works with your application.
     */
    const { accessKeyId, secretAccessKey, sessionToken } = credentials;
    /* getClient takes a KMS client constructor
     * and optional configuration values.
     * The credentials can be injected here,
     * because browser do not have a standard credential discover process the way Node.js does.
     */
    const clientProvider = getClient(KMS, {
        credentials: {
            accessKeyId,
            secretAccessKey,
            sessionToken
        }
    });
    /* The KMS keyring must be configured with the desired CMKs */
    const keyring = new KmsKeyringBrowser({ clientProvider, generatorKeyId, keyIds });
    /* Encryption context is a *very* powerful tool for controlling and managing access.
     * It is ***not*** secret!
     * Encrypted data is opaque.
     * You can use an encryption context to assert things about the encrypted data.
     * Just because you can decrypt something does not mean it is what you expect.
     * For example, if you are are only expecting data from 'us-west-2',
     * the origin can identify a malicious actor.
     * See: https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/concepts.html#encryption-context
     */
    const context = {
        stage: 'demo',
        purpose: 'simple demonstration app',
        origin: 'us-west-2'
    };
    /* Find data to encrypt. */
    const plainText = new Uint8Array([1, 2, 3, 4, 5]);
    /* Encrypt the data. */
    const { result } = await encrypt(keyring, plainText, { encryptionContext: context });
    /* Log the plain text
     * only for testing and to show that it works.
     */
    console.log('plainText:', plainText);
    document.write('</br>plainText:' + plainText + '</br>');
    /* Log the base64-encoded result
     * so that you can try decrypting it with another AWS Encryption SDK implementation.
     */
    const resultBase64 = toBase64(result);
    console.log(resultBase64);
    document.write(resultBase64);
    const { plaintext, messageHeader } = await decrypt(keyring, result);
    /* Grab the encryption context so you can verify it. */
    const { encryptionContext } = messageHeader;
    /* Verify the encryption context.
     * If you use an algorithm suite with signing,
     * the Encryption SDK adds a name-value pair to the encryption context that contains the public key.
     * Because the encryption context might contain additional key-value pairs,
     * do not add a test that requires that all key-value pairs match.
     * Instead, verify that the key-value pairs you expect match.
     */
    Object
        .entries(context)
        .forEach(([key, value]) => {
        if (encryptionContext[key] !== value)
            throw new Error('Encryption Context does not match expected values');
    });
    /* Log the clear message
     * only for testing and to show that it works.
     */
    document.write('</br>plaintext:' + plaintext);
    console.log(plaintext);
    /* Return the values to make testing easy. */
    return { plainText, plaintext };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia21zX3NpbXBsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9rbXNfc2ltcGxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0dBYUc7QUFFSDs7R0FFRztBQUVILE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsR0FBRyxFQUNILFNBQVMsRUFDVCxPQUFPLEVBQ1AsT0FBTyxFQUNSLE1BQU0sNEJBQTRCLENBQUE7QUFDbkMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDhCQUE4QixDQUFBO0FBVXZELHlDQUF5QztBQUN6QyxNQUFNLENBQUMsS0FBSyxVQUFVLG9CQUFvQjtJQUN4Qzs7T0FFRztJQUNILE1BQU0sY0FBYyxHQUFHLHlEQUF5RCxDQUFBO0lBRWhGOzs7Ozs7T0FNRztJQUNILE1BQU0sTUFBTSxHQUFHLENBQUMsNkVBQTZFLENBQUMsQ0FBQTtJQUU5Rjs7Ozs7O09BTUc7SUFDSCxNQUFNLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUUsR0FBRyxXQUFXLENBQUE7SUFFbEU7Ozs7T0FJRztJQUNILE1BQU0sY0FBYyxHQUFHLFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDcEMsV0FBVyxFQUFFO1lBQ1gsV0FBVztZQUNYLGVBQWU7WUFDZixZQUFZO1NBQ2I7S0FDRixDQUFDLENBQUE7SUFFRiw4REFBOEQ7SUFDOUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQTtJQUVqRjs7Ozs7Ozs7T0FRRztJQUNILE1BQU0sT0FBTyxHQUFHO1FBQ2QsS0FBSyxFQUFFLE1BQU07UUFDYixPQUFPLEVBQUUsMEJBQTBCO1FBQ25DLE1BQU0sRUFBRSxXQUFXO0tBQ3BCLENBQUE7SUFFRCwyQkFBMkI7SUFDM0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUVqRCx1QkFBdUI7SUFDdkIsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sT0FBTyxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsRUFBRSxpQkFBaUIsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFBO0lBRXBGOztPQUVHO0lBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFDcEMsUUFBUSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxTQUFTLEdBQUcsT0FBTyxDQUFDLENBQUE7SUFFdkQ7O09BRUc7SUFDSCxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUN6QixRQUFRLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBRTVCLE1BQU0sRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLEdBQUcsTUFBTSxPQUFPLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBRW5FLHVEQUF1RDtJQUN2RCxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsR0FBRyxhQUFhLENBQUE7SUFFM0M7Ozs7OztPQU1HO0lBQ0gsTUFBTTtTQUNILE9BQU8sQ0FBQyxPQUFPLENBQUM7U0FDaEIsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtRQUN4QixJQUFJLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxLQUFLLEtBQUs7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLG1EQUFtRCxDQUFDLENBQUE7SUFDNUcsQ0FBQyxDQUFDLENBQUE7SUFFSjs7T0FFRztJQUNILFFBQVEsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxDQUFDLENBQUE7SUFDN0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUV0Qiw2Q0FBNkM7SUFDN0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsQ0FBQTtBQUNqQyxDQUFDIn0=