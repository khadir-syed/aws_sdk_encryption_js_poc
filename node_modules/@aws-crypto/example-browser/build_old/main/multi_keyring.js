"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/* This is a simple example of using a multi-keyring KMS keyring
 * to combine a KMS keyring and a raw AES keyring
 * to encrypt and decrypt using the AWS Encryption SDK for Javascript in a browser.
 */
const client_browser_1 = require("@aws-crypto/client-browser");
const util_base64_browser_1 = require("@aws-sdk/util-base64-browser");
/* This is done to facilitate testing. */
async function testMultiKeyringExample() {
    /* A KMS CMK is required to generate the data key.
     * You need kms:GenerateDataKey permission on the CMK in generatorKeyId.
     */
    const generatorKeyId = 'arn:aws:kms:us-west-2:658956600833:alias/EncryptDecrypt';
    /* Adding alternate KMS keys that can decrypt.
     * Access to kms:Encrypt is required for every CMK in keyIds.
     * You might list several keys in different AWS Regions.
     * This allows you to decrypt the data in any of the represented Regions.
     * In this example, I am using the same CMK.
     * This is *only* to demonstrate how the CMK ARNs are configured.
     */
    const keyIds = ['arn:aws:kms:us-west-2:658956600833:key/b3537ef1-d8dc-4780-9f5a-55776cbb2f7f'];
    /* Need a client provider that will inject correct credentials.
     * The credentials here are injected by webpack
     * from your environment when the bundle is created.
     * The credential values are pulled using @aws-sdk/credential-provider-node.
     * See kms.webpack.config
     * You should inject your credentials into the browser in a secure manner
     * that works with your application.
     */
    const { accessKeyId, secretAccessKey, sessionToken } = credentials;
    /* getClient takes a KMS client constructor
     * and optional configuration values.
     * The credentials can be injected here,
     * because browser does not have a standard credential discover process
     * the way Node.js does.
     */
    const clientProvider = client_browser_1.getClient(client_browser_1.KMS, {
        credentials: {
            accessKeyId,
            secretAccessKey,
            sessionToken
        }
    });
    /* The KMS keyring must be configured with the desired CMKs */
    const kmsKeyring = new client_browser_1.KmsKeyringBrowser({ clientProvider, generatorKeyId, keyIds });
    /* You need to specify a name
     * and a namespace for raw encryption key providers.
     * The name and namespace that you use in the decryption keyring *must* be an exact,
     * *case-sensitive* match for the name and namespace in the encryption keyring.
     */
    const keyName = 'aes-name';
    const keyNamespace = 'aes-namespace';
    /* The wrapping suite defines the AES-GCM algorithm suite to use. */
    const wrappingSuite = client_browser_1.RawAesWrappingSuiteIdentifier.AES256_GCM_IV12_TAG16_NO_PADDING;
    // Get your plaintext master key from its storage location.
    const unencryptedMasterKey = client_browser_1.synchronousRandomValues(32);
    /* The plaintext master key must be imported into a WebCrypto CryptoKey. */
    const masterKey = await client_browser_1.RawAesKeyringWebCrypto.importCryptoKey(unencryptedMasterKey, wrappingSuite);
    /* Configure the Raw AES keyring. */
    const aesKeyring = new client_browser_1.RawAesKeyringWebCrypto({ keyName, keyNamespace, wrappingSuite, masterKey });
    /* Combine the two keyrings into a multi-keyring. */
    const keyring = new client_browser_1.MultiKeyringWebCrypto({ generator: kmsKeyring, children: [aesKeyring] });
    /* Encryption context is a *very* powerful tool for controlling and managing access.
     * It is ***not*** secret!
     * Encrypted data is opaque.
     * You can use an encryption context to assert things about the encrypted data.
     * Just because you can decrypt something does not mean it is what you expect.
     * For example, if you are are only expecting data from 'us-west-2',
     * the origin can identify a malicious actor.
     * See: https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/concepts.html#encryption-context
     */
    const context = {
        stage: 'demo',
        purpose: 'simple demonstration app',
        origin: 'us-west-2'
    };
    /* Find data to encrypt. */
    const plainText = new Uint8Array([1, 2, 3, 4, 5]);
    /* Encrypt the data. */
    const { result } = await client_browser_1.encrypt(keyring, plainText, { encryptionContext: context });
    /* Log the plain text
     * only for testing and to show that it works.
     */
    console.log('plainText:', plainText);
    document.write('</br>plainText:' + plainText + '</br>');
    /* Log the base64-encoded result
     * so that you can try decrypting it with another AWS Encryption SDK implementation.
     */
    const resultBase64 = util_base64_browser_1.toBase64(result);
    console.log(resultBase64);
    document.write(resultBase64);
    /* Decrypt the data.
     * This decrypt call could be done with **any** of the 3 keyrings.
     * Here we use the multi-keyring, but
     * decrypt(kmsKeyring, result)
     * decrypt(aesKeyring, result)
     * would both work as well.
     */
    const { plaintext, messageHeader } = await client_browser_1.decrypt(keyring, result);
    /* Grab the encryption context so you can verify it. */
    const { encryptionContext } = messageHeader;
    /* Verify the encryption context.
     * If you use an algorithm suite with signing,
     * the Encryption SDK adds a name-value pair to the encryption context that contains the public key.
     * Because the encryption context might contain additional key-value pairs,
     * do not add a test that requires that all key-value pairs match.
     * Instead, verify that the key-value pairs you expect match.
     */
    Object
        .entries(context)
        .forEach(([key, value]) => {
        if (encryptionContext[key] !== value)
            throw new Error('Encryption Context does not match expected values');
    });
    /* Log the clear message
     * only for testing and to show that it works.
     */
    document.write('</br>plaintext:' + plaintext);
    console.log(plaintext);
    /* Return the values to make testing easy. */
    return { plainText, plaintext };
}
exports.testMultiKeyringExample = testMultiKeyringExample;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlfa2V5cmluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tdWx0aV9rZXlyaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7OztHQWFHOztBQUVIOzs7R0FHRztBQUVILCtEQVVtQztBQUNuQyxzRUFBdUQ7QUFVdkQseUNBQXlDO0FBQ2xDLEtBQUssVUFBVSx1QkFBdUI7SUFDM0M7O09BRUc7SUFDSCxNQUFNLGNBQWMsR0FBRyx5REFBeUQsQ0FBQTtJQUVoRjs7Ozs7O09BTUc7SUFDSCxNQUFNLE1BQU0sR0FBRyxDQUFDLDZFQUE2RSxDQUFDLENBQUE7SUFFOUY7Ozs7Ozs7T0FPRztJQUNILE1BQU0sRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLFlBQVksRUFBRSxHQUFHLFdBQVcsQ0FBQTtJQUVsRTs7Ozs7T0FLRztJQUNILE1BQU0sY0FBYyxHQUFHLDBCQUFTLENBQUMsb0JBQUcsRUFBRTtRQUNwQyxXQUFXLEVBQUU7WUFDWCxXQUFXO1lBQ1gsZUFBZTtZQUNmLFlBQVk7U0FDYjtLQUNGLENBQUMsQ0FBQTtJQUVGLDhEQUE4RDtJQUM5RCxNQUFNLFVBQVUsR0FBRyxJQUFJLGtDQUFpQixDQUFDLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFBO0lBRXBGOzs7O09BSUc7SUFDSCxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUE7SUFDMUIsTUFBTSxZQUFZLEdBQUcsZUFBZSxDQUFBO0lBRXBDLG9FQUFvRTtJQUNwRSxNQUFNLGFBQWEsR0FBRyw4Q0FBNkIsQ0FBQyxnQ0FBZ0MsQ0FBQTtJQUVwRiwyREFBMkQ7SUFDM0QsTUFBTSxvQkFBb0IsR0FBRyx3Q0FBdUIsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUV4RCwyRUFBMkU7SUFDM0UsTUFBTSxTQUFTLEdBQUcsTUFBTSx1Q0FBc0IsQ0FBQyxlQUFlLENBQUMsb0JBQW9CLEVBQUUsYUFBYSxDQUFDLENBQUE7SUFFbkcsb0NBQW9DO0lBQ3BDLE1BQU0sVUFBVSxHQUFHLElBQUksdUNBQXNCLENBQUMsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFBO0lBRWxHLG9EQUFvRDtJQUNwRCxNQUFNLE9BQU8sR0FBRyxJQUFJLHNDQUFxQixDQUFDLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsQ0FBRSxVQUFVLENBQUUsRUFBRSxDQUFDLENBQUE7SUFFOUY7Ozs7Ozs7O09BUUc7SUFDSCxNQUFNLE9BQU8sR0FBRztRQUNkLEtBQUssRUFBRSxNQUFNO1FBQ2IsT0FBTyxFQUFFLDBCQUEwQjtRQUNuQyxNQUFNLEVBQUUsV0FBVztLQUNwQixDQUFBO0lBRUQsMkJBQTJCO0lBQzNCLE1BQU0sU0FBUyxHQUFHLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFFakQsdUJBQXVCO0lBQ3ZCLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLHdCQUFPLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxFQUFFLGlCQUFpQixFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUE7SUFFcEY7O09BRUc7SUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQTtJQUNwQyxRQUFRLENBQUMsS0FBSyxDQUFDLGlCQUFpQixHQUFHLFNBQVMsR0FBRyxPQUFPLENBQUMsQ0FBQTtJQUV2RDs7T0FFRztJQUNILE1BQU0sWUFBWSxHQUFHLDhCQUFRLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUN6QixRQUFRLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBRTVCOzs7Ozs7T0FNRztJQUNILE1BQU0sRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLEdBQUcsTUFBTSx3QkFBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUVuRSx1REFBdUQ7SUFDdkQsTUFBTSxFQUFFLGlCQUFpQixFQUFFLEdBQUcsYUFBYSxDQUFBO0lBRTNDOzs7Ozs7T0FNRztJQUNILE1BQU07U0FDSCxPQUFPLENBQUMsT0FBTyxDQUFDO1NBQ2hCLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7UUFDeEIsSUFBSSxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxtREFBbUQsQ0FBQyxDQUFBO0lBQzVHLENBQUMsQ0FBQyxDQUFBO0lBRUo7O09BRUc7SUFDSCxRQUFRLENBQUMsS0FBSyxDQUFDLGlCQUFpQixHQUFHLFNBQVMsQ0FBQyxDQUFBO0lBQzdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFdEIsNkNBQTZDO0lBQzdDLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLENBQUE7QUFDakMsQ0FBQztBQXBJRCwwREFvSUMifQ==