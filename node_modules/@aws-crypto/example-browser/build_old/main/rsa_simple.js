"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/* This is a simple example of using a raw RSA keyring
 * to encrypt and decrypt using the AWS Encryption SDK for Javascript
 * in a browser.
 */
const client_browser_1 = require("@aws-crypto/client-browser");
const util_base64_browser_1 = require("@aws-sdk/util-base64-browser");
/* This is done to facilitate testing. */
async function testRSA() {
    /* JWK for the RSA Keys to use.
     * These keys are *Public*!
     * *DO NOT USE*
     */
    const privateRsaJwkKey = { 'alg': 'RSA-OAEP-256', 'd': 'XcAlS3OYtZ5F3BFGRQH5B8soiqstUk9JkH6_sUhBUfM7yjFpn3MQACtGgOKsFIO01KWCVl7Cn6E3c-MuuT3QqNQrUx8n-WrJU8qNpDOGJ5CVpG9-xTSQVNzRV92gj8g7-BIgehtzMmirXXNsb1XeTg9zsm3iptt9VyhplGqcgOdmm72sT1Z8ZmkagaElHSg0dR1ZNGgzSfTtRg_J1tTh7cmFb1LVz069o6cRaa5ueOPNKxmEslBdVWsDo9naxd_keLiqOOMIQp-KlLuQ-Zhn5fZyqxkRPGjTKZZHitgurzfWG4ERjjrYCbZsOjEt9Tj8FXXUB8bd3qRPy5UkN-XLEQ', 'dp': 'V8QYdWm4OqWpfF_NPdCGr5eqztfHiQQn1NLmkvNO8c9dc2yNizZ4GxtNNEARYjgnLK0ROCoiK5yamtVDyjZ_zzZUvE0CG8iNRg1qvaOM8n_7B2YgmUs9rJ-QKK3HVEsi_M0x-hHeRl3ocAkNfby3__yt6s43FvyrccQh89WcAr0', 'dq': 'NT5lrYlvkOwXIHl8P9AQm1nNL0RkHSrWahYlagRkyU3ELySlWr2laDxXzPnngpuBvyA98iq6Z2JTn8ArtXXvTqQk6BF6np6qqg1QNQxsQeU4Aj3xOMV9EGh57Zpa8Rs0jVydxBdlRW03Fr0UChHKxmT2kS0622gdlGQAs3YxMck', 'e': 'AQAB', 'ext': true, 'key_ops': ['unwrapKey'], 'kty': 'RSA', 'n': '6k_jrxg7mpz7CzgAr6eRqJr1VlvjJ9uQY71hadkDZkLLZHiMl7hz73lqq3w2MfHCa3Pf3BVo5TCXGYuxKOlPb7bH0WWpMeAzOKR_X27UqfA8MBVGb4YO5HXqw0jup8-I-Zi3CQAmP87uE6GDuh7xzeAcwpGD5xE0N74-uWq3YS92PFHCavtryx-ad9VGTgfAbkV3k1-RSxIiZjzbAt3exBAn5EjMfF6FMI70_HYqO-5xGv_aAPSa1OMc_buK5QACN7gmFwqHBzw98v93iyGUc4_XJNL-jPzKNP4AT1zMc6p6RxF3SYytNq7iXIjUmm-oY8fvCSmT1F13XKdzv7DLOw', 'p': '9dGuBwEDeOHFwJ_AQXHBWu53bv_L1_9lh2X-NEBO1B7YMhYWu2nMqXEvLpwvPqyBXwWnuPdfGqu6BHv22RDAF7Lu_oUshq-9dzSwFxaC5PQ2NwtHnz0-zwhEzCE3Qw9t63_OXX87gjp5vy6c5bvb3B9EbZU33Xf9nqVEJhzFreU', 'q': '9AQ0oYhctBbFuIu4jt1HBmqQGGAECbhQAMw324MX8pVUg6GOtF0X822iEsq7aIfY8u5nTWu1kKl6s84US1yII0sJmW2Jj722r5VYDIrxk5x_mLQ6jXmfuH2kl-Lvzo6aHIVkDLIK-IaPt5teSwG71QfAPDgR6drIAuSFnJZ2Ap8', 'qi': 'mfoT9tmXPhLBanX5Mg76pO21NAXR1aAQ76tS1_hJZYxP8iZtmlEdvvAMIdSibvIt7Gfi60rBPnxqmmKuitJfzIVCd4sVLjIVEjT_njjLAzU-NTQdGugPCWWo8jB8NyeFy6nrZa_Hy52ijBn-Xt5G8pzvz5lF5gRfCe09y14oNeQ' };
    const publicRsaJwkKey = { 'alg': 'RSA-OAEP-256', 'e': 'AQAB', 'ext': true, 'key_ops': ['wrapKey'], 'kty': 'RSA', 'n': '6k_jrxg7mpz7CzgAr6eRqJr1VlvjJ9uQY71hadkDZkLLZHiMl7hz73lqq3w2MfHCa3Pf3BVo5TCXGYuxKOlPb7bH0WWpMeAzOKR_X27UqfA8MBVGb4YO5HXqw0jup8-I-Zi3CQAmP87uE6GDuh7xzeAcwpGD5xE0N74-uWq3YS92PFHCavtryx-ad9VGTgfAbkV3k1-RSxIiZjzbAt3exBAn5EjMfF6FMI70_HYqO-5xGv_aAPSa1OMc_buK5QACN7gmFwqHBzw98v93iyGUc4_XJNL-jPzKNP4AT1zMc6p6RxF3SYytNq7iXIjUmm-oY8fvCSmT1F13XKdzv7DLOw' };
    /* The RSA private key needs to be imported to a CryptoKey. */
    const privateKey = await client_browser_1.RawRsaKeyringWebCrypto.importPrivateKey(privateRsaJwkKey);
    /* The RSA public key needs to be imported to a CryptoKey. */
    const publicKey = await client_browser_1.RawRsaKeyringWebCrypto.importPublicKey(publicRsaJwkKey);
    /* You need to specify a name
     * and a namespace for raw encryption key providers.
     * The name and namespace that you use in the decryption keyring *must* be an exact,
     * *case-sensitive* match for the name and namespace in the encryption keyring.
     */
    const keyName = '8CED2FD20FC88A9C06EFDB073707EB1EF1655780';
    const keyNamespace = 'Example RSA Provider';
    /* The Raw RSA Keyring must be configured with the desired CryptoKeys. */
    const keyring = new client_browser_1.RawRsaKeyringWebCrypto({ keyName, keyNamespace, publicKey, privateKey });
    /* Encryption context is a *very* powerful tool for controlling and managing access.
     * It is ***not*** secret!
     * Encrypted data is opaque.
     * You can use an encryption context to assert things about the encrypted data.
     * Just because you can decrypt something does not mean it is what you expect.
     * For example, if you are are only expecting data from 'us-west-2',
     * the origin can identify a malicious actor.
     * See: https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/concepts.html#encryption-context
     */
    const context = {
        stage: 'demo',
        purpose: 'simple demonstration app',
        origin: 'us-west-2'
    };
    /* Find data to encrypt. */
    const plainText = new Uint8Array([1, 2, 3, 4, 5]);
    /* Encrypt the data. */
    const { result } = await client_browser_1.encrypt(keyring, plainText, { encryptionContext: context });
    /* Log the plain text
     * only for testing and to show that it works.
     */
    console.log('plainText:', plainText);
    document.write('</br>plainText:' + plainText + '</br>');
    /* Log the base64-encoded result
     * so that you can try decrypting it with another AWS Encryption SDK implementation.
     */
    const resultBase64 = util_base64_browser_1.toBase64(result);
    console.log(resultBase64);
    document.write(resultBase64);
    const { plaintext, messageHeader } = await client_browser_1.decrypt(keyring, result);
    /* Grab the encryption context so you can verify it. */
    const { encryptionContext } = messageHeader;
    /* Verify the encryption context.
     * If you use an algorithm suite with signing,
     * the Encryption SDK adds a name-value pair to the encryption context that contains the public key.
     * Because the encryption context might contain additional key-value pairs,
     * do not add a test that requires that all key-value pairs match.
     * Instead, verify that the key-value pairs you expect match.
     */
    Object
        .entries(context)
        .forEach(([key, value]) => {
        if (encryptionContext[key] !== value)
            throw new Error('Encryption Context does not match expected values');
    });
    /* Log the clear message
     * only for testing and to show that it works.
     */
    document.write('</br>plaintext:' + plaintext);
    console.log(plaintext);
    /* Return the values to make testing easy. */
    return { plainText, plaintext };
}
exports.testRSA = testRSA;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnNhX3NpbXBsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yc2Ffc2ltcGxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7OztHQWFHOztBQUVIOzs7R0FHRztBQUVILCtEQUttQztBQUNuQyxzRUFBdUQ7QUFFdkQseUNBQXlDO0FBQ2xDLEtBQUssVUFBVSxPQUFPO0lBQzNCOzs7T0FHRztJQUNILE1BQU0sZ0JBQWdCLEdBQXFCLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRSxHQUFHLEVBQUUsd1ZBQXdWLEVBQUUsSUFBSSxFQUFFLDZLQUE2SyxFQUFFLElBQUksRUFBRSw2S0FBNkssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsd1ZBQXdWLEVBQUUsR0FBRyxFQUFFLDZLQUE2SyxFQUFFLEdBQUcsRUFBRSw2S0FBNkssRUFBRSxJQUFJLEVBQUUsNktBQTZLLEVBQUUsQ0FBQTtJQUMzc0QsTUFBTSxlQUFlLEdBQXFCLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsd1ZBQXdWLEVBQUUsQ0FBQTtJQUVsZSw4REFBOEQ7SUFDOUQsTUFBTSxVQUFVLEdBQUcsTUFBTSx1Q0FBc0IsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0lBQ2xGLDZEQUE2RDtJQUM3RCxNQUFNLFNBQVMsR0FBRyxNQUFNLHVDQUFzQixDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUUvRTs7OztPQUlHO0lBQ0gsTUFBTSxPQUFPLEdBQUcsMENBQTBDLENBQUE7SUFDMUQsTUFBTSxZQUFZLEdBQUcsc0JBQXNCLENBQUE7SUFFM0MseUVBQXlFO0lBQ3pFLE1BQU0sT0FBTyxHQUFHLElBQUksdUNBQXNCLENBQUMsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFBO0lBRTVGOzs7Ozs7OztPQVFHO0lBQ0gsTUFBTSxPQUFPLEdBQUc7UUFDZCxLQUFLLEVBQUUsTUFBTTtRQUNiLE9BQU8sRUFBRSwwQkFBMEI7UUFDbkMsTUFBTSxFQUFFLFdBQVc7S0FDcEIsQ0FBQTtJQUVELDJCQUEyQjtJQUMzQixNQUFNLFNBQVMsR0FBRyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRWpELHVCQUF1QjtJQUN2QixNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsTUFBTSx3QkFBTyxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsRUFBRSxpQkFBaUIsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFBO0lBRXBGOztPQUVHO0lBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFDcEMsUUFBUSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxTQUFTLEdBQUcsT0FBTyxDQUFDLENBQUE7SUFFdkQ7O09BRUc7SUFDSCxNQUFNLFlBQVksR0FBRyw4QkFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDekIsUUFBUSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUU1QixNQUFNLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxHQUFHLE1BQU0sd0JBQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFFbkUsdURBQXVEO0lBQ3ZELE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxHQUFHLGFBQWEsQ0FBQTtJQUUzQzs7Ozs7O09BTUc7SUFDSCxNQUFNO1NBQ0gsT0FBTyxDQUFDLE9BQU8sQ0FBQztTQUNoQixPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFO1FBQ3hCLElBQUksaUJBQWlCLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsbURBQW1ELENBQUMsQ0FBQTtJQUM1RyxDQUFDLENBQUMsQ0FBQTtJQUVKOztPQUVHO0lBQ0gsUUFBUSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxTQUFTLENBQUMsQ0FBQTtJQUM3QyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBRXRCLDZDQUE2QztJQUM3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxDQUFBO0FBQ2pDLENBQUM7QUFwRkQsMEJBb0ZDIn0=