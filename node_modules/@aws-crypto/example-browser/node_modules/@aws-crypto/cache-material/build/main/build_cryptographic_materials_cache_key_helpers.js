"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const serialize_1 = require("@aws-crypto/serialize");
const portable_compare_1 = require("./portable_compare");
//  512 bits of 0 for padding between hashes in decryption materials cache ID generation.
const BIT_PAD_512 = Buffer.alloc(64);
function buildCryptographicMaterialsCacheKeyHelpers(fromUtf8, toUtf8, sha512) {
    const { serializeEncryptionContext, serializeEncryptedDataKey } = serialize_1.serializeFactory(fromUtf8);
    return {
        buildEncryptionMaterialCacheKey,
        buildDecryptionMaterialCacheKey,
        encryptedDataKeysHash,
        encryptionContextHash
    };
    async function buildEncryptionMaterialCacheKey(partition, { suite, encryptionContext }) {
        const algorithmInfo = suite
            ? [new Uint8Array([1]), serialize_1.uInt16BE(suite.id)]
            : [new Uint8Array([0])];
        const key = await sha512(await sha512(fromUtf8(partition)), ...algorithmInfo, await encryptionContextHash(encryptionContext));
        return toUtf8(key);
    }
    async function buildDecryptionMaterialCacheKey(partition, { suite, encryptedDataKeys, encryptionContext }) {
        const { id } = suite;
        const key = await sha512(await sha512(fromUtf8(partition)), serialize_1.uInt16BE(id), ...(await encryptedDataKeysHash(encryptedDataKeys)), BIT_PAD_512, await encryptionContextHash(encryptionContext));
        return toUtf8(key);
    }
    async function encryptedDataKeysHash(encryptedDataKeys) {
        const hashes = await Promise.all(encryptedDataKeys
            .map(serializeEncryptedDataKey)
            .map(edk => sha512(edk)));
        return hashes.sort(portable_compare_1.compare);
    }
    function encryptionContextHash(context) {
        /* The AAD section is uInt16BE(length) + AAD
         * see: https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/message-format.html#header-aad
         * However, the RAW Keyring wants _only_ the ADD.
         * So, I just slice off the length.
         */
        const serializedContext = serializeEncryptionContext(context).slice(2);
        return sha512(serializedContext);
    }
}
exports.buildCryptographicMaterialsCacheKeyHelpers = buildCryptographicMaterialsCacheKeyHelpers;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRfY3J5cHRvZ3JhcGhpY19tYXRlcmlhbHNfY2FjaGVfa2V5X2hlbHBlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYnVpbGRfY3J5cHRvZ3JhcGhpY19tYXRlcmlhbHNfY2FjaGVfa2V5X2hlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7O0dBYUc7O0FBU0gscURBQWtFO0FBQ2xFLHlEQUE0QztBQUU1Qyx5RkFBeUY7QUFDekYsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUVwQyxTQUFnQiwwQ0FBMEMsQ0FDeEQsUUFBdUMsRUFDdkMsTUFBcUMsRUFDckMsTUFBaUU7SUFFakUsTUFBTSxFQUNKLDBCQUEwQixFQUMxQix5QkFBeUIsRUFDMUIsR0FBRyw0QkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUU5QixPQUFPO1FBQ0wsK0JBQStCO1FBQy9CLCtCQUErQjtRQUMvQixxQkFBcUI7UUFDckIscUJBQXFCO0tBQ3RCLENBQUE7SUFFRCxLQUFLLFVBQVUsK0JBQStCLENBQzVDLFNBQWlCLEVBQ2pCLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUF3QjtRQUVsRCxNQUFNLGFBQWEsR0FBRyxLQUFLO1lBQ3pCLENBQUMsQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxvQkFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMzQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUV6QixNQUFNLEdBQUcsR0FBRyxNQUFNLE1BQU0sQ0FDdEIsTUFBTSxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQ2pDLEdBQUcsYUFBYSxFQUNoQixNQUFNLHFCQUFxQixDQUFDLGlCQUFpQixDQUFDLENBQy9DLENBQUE7UUFDRCxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNwQixDQUFDO0lBRUQsS0FBSyxVQUFVLCtCQUErQixDQUM1QyxTQUFpQixFQUNqQixFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxpQkFBaUIsRUFBd0I7UUFFckUsTUFBTSxFQUFFLEVBQUUsRUFBRSxHQUFHLEtBQUssQ0FBQTtRQUVwQixNQUFNLEdBQUcsR0FBRyxNQUFNLE1BQU0sQ0FDdEIsTUFBTSxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQ2pDLG9CQUFRLENBQUMsRUFBRSxDQUFDLEVBQ1osR0FBRyxDQUFDLE1BQU0scUJBQXFCLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxFQUNuRCxXQUFXLEVBQ1gsTUFBTSxxQkFBcUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUMvQyxDQUFBO1FBQ0QsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDcEIsQ0FBQztJQUVELEtBQUssVUFBVSxxQkFBcUIsQ0FBRSxpQkFBa0Q7UUFDdEYsTUFBTSxNQUFNLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUM5QixpQkFBaUI7YUFDZCxHQUFHLENBQUMseUJBQXlCLENBQUM7YUFDOUIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQzNCLENBQUE7UUFDRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsMEJBQU8sQ0FBQyxDQUFBO0lBQzdCLENBQUM7SUFFRCxTQUFTLHFCQUFxQixDQUFFLE9BQTBCO1FBQ3hEOzs7O1dBSUc7UUFDSCxNQUFNLGlCQUFpQixHQUFHLDBCQUEwQixDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN0RSxPQUFPLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0lBQ2xDLENBQUM7QUFDSCxDQUFDO0FBbkVELGdHQW1FQyJ9