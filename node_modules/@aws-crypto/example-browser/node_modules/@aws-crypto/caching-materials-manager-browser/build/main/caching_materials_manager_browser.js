"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const cache_material_1 = require("@aws-crypto/cache-material");
const material_management_browser_1 = require("@aws-crypto/material-management-browser");
const util_utf8_browser_1 = require("@aws-sdk/util-utf8-browser");
const util_base64_browser_1 = require("@aws-sdk/util-base64-browser");
const web_crypto_backend_1 = require("@aws-crypto/web-crypto-backend");
const sha512_1 = require("./sha512");
const cacheKeyHelpers = cache_material_1.buildCryptographicMaterialsCacheKeyHelpers(util_utf8_browser_1.fromUtf8, util_utf8_browser_1.toUtf8, sha512_1.sha512);
class WebCryptoCachingMaterialsManager {
    constructor(input) {
        this.getEncryptionMaterials = cache_material_1.getEncryptionMaterials(cacheKeyHelpers);
        this.decryptMaterials = cache_material_1.decryptMaterials(cacheKeyHelpers);
        this._cacheEntryHasExceededLimits = cache_material_1.cacheEntryHasExceededLimits();
        const backingMaterialsManager = input.backingMaterials instanceof material_management_browser_1.KeyringWebCrypto
            ? new material_management_browser_1.WebCryptoDefaultCryptographicMaterialsManager(input.backingMaterials)
            : input.backingMaterials;
        /* Precondition: A partition value must exist for WebCryptoCachingMaterialsManager.
         * The maximum hash function at this time is 512.
         * So I create 64 bytes of random data.
         */
        const { partition = util_base64_browser_1.toBase64(web_crypto_backend_1.synchronousRandomValues(64)) } = input;
        cache_material_1.decorateProperties(this, {
            ...input,
            backingMaterialsManager,
            partition
        });
    }
}
exports.WebCryptoCachingMaterialsManager = WebCryptoCachingMaterialsManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGluZ19tYXRlcmlhbHNfbWFuYWdlcl9icm93c2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NhY2hpbmdfbWF0ZXJpYWxzX21hbmFnZXJfYnJvd3Nlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7R0FhRzs7QUFFSCwrREFTbUM7QUFDbkMseUZBT2dEO0FBQ2hELGtFQUE2RDtBQUM3RCxzRUFBdUQ7QUFDdkQsdUVBQXdFO0FBQ3hFLHFDQUFpQztBQUVqQyxNQUFNLGVBQWUsR0FBRywyREFBMEMsQ0FBQyw0QkFBUSxFQUFFLDBCQUFNLEVBQUUsZUFBTSxDQUFDLENBQUE7QUFFNUYsTUFBYSxnQ0FBZ0M7SUFRM0MsWUFBYSxLQUE0RDtRQWtCekUsMkJBQXNCLEdBQW9DLHVDQUFzQixDQUEwQixlQUFlLENBQUMsQ0FBQTtRQUMxSCxxQkFBZ0IsR0FBaUMsaUNBQWdCLENBQTBCLGVBQWUsQ0FBQyxDQUFBO1FBQzNHLGlDQUE0QixHQUFHLDRDQUEyQixFQUEyQixDQUFBO1FBbkJuRixNQUFNLHVCQUF1QixHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsWUFBWSw4Q0FBZ0I7WUFDaEYsQ0FBQyxDQUFDLElBQUksMkVBQTZDLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDO1lBQzNFLENBQUMsQ0FBZ0QsS0FBSyxDQUFDLGdCQUFnQixDQUFBO1FBRXpFOzs7V0FHRztRQUNILE1BQU0sRUFBRSxTQUFTLEdBQUcsOEJBQVEsQ0FBQyw0Q0FBdUIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFBO1FBRW5FLG1DQUFrQixDQUFDLElBQUksRUFBRTtZQUN2QixHQUFHLEtBQUs7WUFDUix1QkFBdUI7WUFDdkIsU0FBUztTQUNWLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FLRjtBQTdCRCw0RUE2QkMifQ==