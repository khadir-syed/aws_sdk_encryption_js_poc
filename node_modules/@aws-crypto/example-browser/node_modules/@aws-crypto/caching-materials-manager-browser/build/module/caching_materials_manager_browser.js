/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { // eslint-disable-line no-unused-vars
decorateProperties, getEncryptionMaterials, decryptMaterials, cacheEntryHasExceededLimits, buildCryptographicMaterialsCacheKeyHelpers } from '@aws-crypto/cache-material';
import { // eslint-disable-line no-unused-vars
WebCryptoDefaultCryptographicMaterialsManager, // eslint-disable-line no-unused-vars
KeyringWebCrypto } from '@aws-crypto/material-management-browser';
import { fromUtf8, toUtf8 } from '@aws-sdk/util-utf8-browser';
import { toBase64 } from '@aws-sdk/util-base64-browser';
import { synchronousRandomValues } from '@aws-crypto/web-crypto-backend';
import { sha512 } from './sha512';
const cacheKeyHelpers = buildCryptographicMaterialsCacheKeyHelpers(fromUtf8, toUtf8, sha512);
export class WebCryptoCachingMaterialsManager {
    constructor(input) {
        this.getEncryptionMaterials = getEncryptionMaterials(cacheKeyHelpers);
        this.decryptMaterials = decryptMaterials(cacheKeyHelpers);
        this._cacheEntryHasExceededLimits = cacheEntryHasExceededLimits();
        const backingMaterialsManager = input.backingMaterials instanceof KeyringWebCrypto
            ? new WebCryptoDefaultCryptographicMaterialsManager(input.backingMaterials)
            : input.backingMaterials;
        /* Precondition: A partition value must exist for WebCryptoCachingMaterialsManager.
         * The maximum hash function at this time is 512.
         * So I create 64 bytes of random data.
         */
        const { partition = toBase64(synchronousRandomValues(64)) } = input;
        decorateProperties(this, {
            ...input,
            backingMaterialsManager,
            partition
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGluZ19tYXRlcmlhbHNfbWFuYWdlcl9icm93c2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NhY2hpbmdfbWF0ZXJpYWxzX21hbmFnZXJfYnJvd3Nlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztHQWFHO0FBRUgsT0FBTyxFQUNvQixxQ0FBcUM7QUFDOUQsa0JBQWtCLEVBQ2xCLHNCQUFzQixFQUN0QixnQkFBZ0IsRUFDaEIsMkJBQTJCLEVBQzNCLDBDQUEwQyxFQUczQyxNQUFNLDRCQUE0QixDQUFBO0FBQ25DLE9BQU8sRUFDc0IscUNBQXFDO0FBQ2hFLDZDQUE2QyxFQUNwQixxQ0FBcUM7QUFDOUQsZ0JBQWdCLEVBR2pCLE1BQU0seUNBQXlDLENBQUE7QUFDaEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUM3RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sOEJBQThCLENBQUE7QUFDdkQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZ0NBQWdDLENBQUE7QUFDeEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUVqQyxNQUFNLGVBQWUsR0FBRywwQ0FBMEMsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0FBRTVGLE1BQU0sT0FBTyxnQ0FBZ0M7SUFRM0MsWUFBYSxLQUE0RDtRQWtCekUsMkJBQXNCLEdBQW9DLHNCQUFzQixDQUEwQixlQUFlLENBQUMsQ0FBQTtRQUMxSCxxQkFBZ0IsR0FBaUMsZ0JBQWdCLENBQTBCLGVBQWUsQ0FBQyxDQUFBO1FBQzNHLGlDQUE0QixHQUFHLDJCQUEyQixFQUEyQixDQUFBO1FBbkJuRixNQUFNLHVCQUF1QixHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsWUFBWSxnQkFBZ0I7WUFDaEYsQ0FBQyxDQUFDLElBQUksNkNBQTZDLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDO1lBQzNFLENBQUMsQ0FBZ0QsS0FBSyxDQUFDLGdCQUFnQixDQUFBO1FBRXpFOzs7V0FHRztRQUNILE1BQU0sRUFBRSxTQUFTLEdBQUcsUUFBUSxDQUFDLHVCQUF1QixDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUE7UUFFbkUsa0JBQWtCLENBQUMsSUFBSSxFQUFFO1lBQ3ZCLEdBQUcsS0FBSztZQUNSLHVCQUF1QjtZQUN2QixTQUFTO1NBQ1YsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUtGIn0=