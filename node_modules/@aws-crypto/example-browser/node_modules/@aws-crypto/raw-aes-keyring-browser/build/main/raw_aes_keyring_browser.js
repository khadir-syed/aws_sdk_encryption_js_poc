"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const material_management_browser_1 = require("@aws-crypto/material-management-browser");
const serialize_1 = require("@aws-crypto/serialize");
const raw_keyring_1 = require("@aws-crypto/raw-keyring");
const util_utf8_browser_1 = require("@aws-sdk/util-utf8-browser");
const random_source_browser_1 = require("@aws-crypto/random-source-browser");
const web_crypto_backend_1 = require("@aws-crypto/web-crypto-backend");
const { serializeEncryptionContext } = serialize_1.serializeFactory(util_utf8_browser_1.fromUtf8);
const { rawAesEncryptedDataKey } = raw_keyring_1.rawAesEncryptedDataKeyFactory(util_utf8_browser_1.toUtf8, util_utf8_browser_1.fromUtf8);
const { rawAesEncryptedParts } = raw_keyring_1.rawAesEncryptedPartsFactory(util_utf8_browser_1.fromUtf8);
const encryptFlags = material_management_browser_1.KeyringTraceFlag.WRAPPING_KEY_ENCRYPTED_DATA_KEY | material_management_browser_1.KeyringTraceFlag.WRAPPING_KEY_SIGNED_ENC_CTX;
const decryptFlags = material_management_browser_1.KeyringTraceFlag.WRAPPING_KEY_DECRYPTED_DATA_KEY | material_management_browser_1.KeyringTraceFlag.WRAPPING_KEY_VERIFIED_ENC_CTX;
class RawAesKeyringWebCrypto extends material_management_browser_1.KeyringWebCrypto {
    constructor(input) {
        super();
        this._rawOnEncrypt = raw_keyring_1._onEncrypt(random_source_browser_1.randomValuesOnly);
        this._onEncrypt = async (material) => {
            const _material = await this._rawOnEncrypt(material);
            return material_management_browser_1.importForWebCryptoEncryptionMaterial(_material);
        };
        /* onDecrypt does not need to import the crypto key, because this is handled in the unwrap operation
         * Encrypt needs to have access to the unencrypted data key to encrypt with other keyrings
         * but once I have functional material no other decrypt operations need to be performed.
         */
        this._onDecrypt = raw_keyring_1._onDecrypt();
        const { keyName, keyNamespace, masterKey, wrappingSuite } = input;
        /* Precondition: AesKeyringWebCrypto needs identifying information for encrypt and decrypt. */
        material_management_browser_1.needs(keyName && keyNamespace, 'Identifying information must be defined.');
        /* Precondition: RawAesKeyringWebCrypto requires a wrappingSuite to be a valid RawAesWrappingSuite. */
        const wrappingMaterial = new raw_keyring_1.WebCryptoRawAesMaterial(wrappingSuite)
            /* Precondition: unencryptedMasterKey must correspond to the WebCryptoAlgorithmSuite specification.
             * Note: the KeyringTrace and flag are _only_ set because I am reusing an existing implementation.
             * See: raw_aes_material.ts in @aws-crypto/raw-keyring for details
             */
            .setCryptoKey(masterKey, { keyNamespace, keyName, flags: material_management_browser_1.KeyringTraceFlag.WRAPPING_KEY_GENERATED_DATA_KEY });
        const _wrapKey = async (material) => {
            /* The AAD section is uInt16BE(length) + AAD
             * see: https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/message-format.html#header-aad
             * However, the RAW Keyring wants _only_ the ADD.
             * So, I just slice off the length.
             */
            const aad = serializeEncryptionContext(material.encryptionContext).slice(2);
            const { keyNamespace, keyName } = this;
            return aesGcmWrapKey(keyNamespace, keyName, material, aad, wrappingMaterial);
        };
        const _unwrapKey = async (material, edk) => {
            /* The AAD section is uInt16BE(length) + AAD
             * see: https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/message-format.html#header-aad
             * However, the RAW Keyring wants _only_ the ADD.
             * So, I just slice off the length.
             */
            const aad = serializeEncryptionContext(material.encryptionContext).slice(2);
            const { keyNamespace, keyName } = this;
            return aesGcmUnwrapKey(keyNamespace, keyName, material, wrappingMaterial, edk, aad);
        };
        material_management_browser_1.readOnlyProperty(this, 'keyName', keyName);
        material_management_browser_1.readOnlyProperty(this, 'keyNamespace', keyNamespace);
        material_management_browser_1.readOnlyProperty(this, '_wrapKey', _wrapKey);
        material_management_browser_1.readOnlyProperty(this, '_unwrapKey', _unwrapKey);
    }
    _filter({ providerId, providerInfo }) {
        const { keyNamespace, keyName } = this;
        return providerId === keyNamespace && providerInfo.startsWith(keyName);
    }
    static async importCryptoKey(masterKey, wrappingSuite) {
        material_management_browser_1.needs(masterKey instanceof Uint8Array, 'Unsupported master key type.');
        const material = new raw_keyring_1.WebCryptoRawAesMaterial(wrappingSuite)
            /* Precondition: masterKey must correspond to the algorithm suite specification.
            * Note: the KeyringTrace and flag are _only_ set because I am reusing an existing implementation.
            * See: raw_aes_material.ts in @aws-crypto/raw-keyring for details
            */
            .setUnencryptedDataKey(masterKey, { keyNamespace: 'importOnly', keyName: 'importOnly', flags: material_management_browser_1.KeyringTraceFlag.WRAPPING_KEY_GENERATED_DATA_KEY });
        return web_crypto_backend_1.getWebCryptoBackend()
            .then(web_crypto_backend_1.getZeroByteSubtle)
            .then(backend => material_management_browser_1._importCryptoKey(backend, material, ['encrypt', 'decrypt']));
    }
}
exports.RawAesKeyringWebCrypto = RawAesKeyringWebCrypto;
material_management_browser_1.immutableClass(RawAesKeyringWebCrypto);
/**
 * Uses aes-gcm to encrypt the data key and return the passed WebCryptoEncryptionMaterial with
 * an EncryptedDataKey added.
 * @param keyNamespace [String] The keyring namespace (for KeyringTrace)
 * @param keyName [String] The keyring name (for KeyringTrace and to extract the extra info stored in providerInfo)
 * @param material [WebCryptoEncryptionMaterial] The target material to which the EncryptedDataKey will be added
 * @param aad [Uint8Array] The serialized aad (EncryptionContext)
 * @param wrappingMaterial [WebCryptoRawAesMaterial] The material used to decrypt the EncryptedDataKey
 * @returns [WebCryptoEncryptionMaterial] Mutates and returns the same WebCryptoEncryptionMaterial that was passed but with an EncryptedDataKey added
 */
async function aesGcmWrapKey(keyNamespace, keyName, material, aad, wrappingMaterial) {
    const backend = await web_crypto_backend_1.getWebCryptoBackend();
    const iv = await backend.randomValues(material.suite.ivLength);
    const kdfGetSubtleEncrypt = material_management_browser_1.getSubtleFunction(wrappingMaterial, backend, 'encrypt');
    const info = new Uint8Array();
    const dataKey = material_management_browser_1.unwrapDataKey(material.getUnencryptedDataKey());
    const buffer = await kdfGetSubtleEncrypt(info)(iv, aad)(dataKey);
    const ciphertext = new Uint8Array(buffer, 0, buffer.byteLength - material.suite.tagLength / 8);
    const authTag = new Uint8Array(buffer, buffer.byteLength - material.suite.tagLength / 8);
    const edk = rawAesEncryptedDataKey(keyNamespace, keyName, iv, ciphertext, authTag);
    return material.addEncryptedDataKey(edk, encryptFlags);
}
/**
 * Uses aes-gcm to decrypt the encrypted data key and return the passed WebCryptoDecryptionMaterial with
 * the unencrypted data key set.
 * @param keyNamespace [String] The keyring namespace (for KeyringTrace)
 * @param keyName [String] The keyring name (for KeyringTrace and to extract the extra info stored in providerInfo)
 * @param material [WebCryptoDecryptionMaterial] The target material to which the decrypted data key will be added
 * @param wrappingMaterial [WebCryptoRawAesMaterial] The material used to decrypt the EncryptedDataKey
 * @param edk [EncryptedDataKey] The EncryptedDataKey on which to operate
 * @param aad [Uint8Array] The serialized aad (EncryptionContext)
 * @returns [WebCryptoDecryptionMaterial] Mutates and returns the same WebCryptoDecryptionMaterial that was passed but with the unencrypted data key set
 */
async function aesGcmUnwrapKey(keyNamespace, keyName, material, wrappingMaterial, edk, aad) {
    const { suite } = material;
    const { iv, ciphertext, authTag } = rawAesEncryptedParts(suite, keyName, edk);
    const backend = await web_crypto_backend_1.getWebCryptoBackend();
    const KdfGetSubtleDecrypt = material_management_browser_1.getSubtleFunction(wrappingMaterial, backend, 'decrypt');
    const info = new Uint8Array();
    const buffer = await KdfGetSubtleDecrypt(info)(iv, aad)(serialize_1.concatBuffers(ciphertext, authTag));
    const trace = { keyNamespace, keyName, flags: decryptFlags };
    material.setUnencryptedDataKey(new Uint8Array(buffer), trace);
    return material_management_browser_1.importForWebCryptoDecryptionMaterial(material);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF3X2Flc19rZXlyaW5nX2Jyb3dzZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmF3X2Flc19rZXlyaW5nX2Jyb3dzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7O0dBYUc7O0FBRUgseUZBZWdEO0FBQ2hELHFEQUc4QjtBQUM5Qix5REFTZ0M7QUFDaEMsa0VBQTZEO0FBQzdELDZFQUFvRTtBQUNwRSx1RUFBdUY7QUFDdkYsTUFBTSxFQUFFLDBCQUEwQixFQUFFLEdBQUcsNEJBQWdCLENBQUMsNEJBQVEsQ0FBQyxDQUFBO0FBQ2pFLE1BQU0sRUFBRSxzQkFBc0IsRUFBRSxHQUFHLDJDQUE2QixDQUFDLDBCQUFNLEVBQUUsNEJBQVEsQ0FBQyxDQUFBO0FBQ2xGLE1BQU0sRUFBRSxvQkFBb0IsRUFBRSxHQUFHLHlDQUEyQixDQUFDLDRCQUFRLENBQUMsQ0FBQTtBQUN0RSxNQUFNLFlBQVksR0FBRyw4Q0FBZ0IsQ0FBQywrQkFBK0IsR0FBRyw4Q0FBZ0IsQ0FBQywyQkFBMkIsQ0FBQTtBQUNwSCxNQUFNLFlBQVksR0FBRyw4Q0FBZ0IsQ0FBQywrQkFBK0IsR0FBRyw4Q0FBZ0IsQ0FBQyw2QkFBNkIsQ0FBQTtBQVN0SCxNQUFhLHNCQUF1QixTQUFRLDhDQUFnQjtJQU0xRCxZQUFhLEtBQWtDO1FBQzdDLEtBQUssRUFBRSxDQUFBO1FBK0NULGtCQUFhLEdBQUcsd0JBQVUsQ0FBa0Qsd0NBQWdCLENBQUMsQ0FBQTtRQUM3RixlQUFVLEdBQUcsS0FBSyxFQUFFLFFBQXFDLEVBQUUsRUFBRTtZQUMzRCxNQUFNLFNBQVMsR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUE7WUFDcEQsT0FBTyxrRUFBb0MsQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUN4RCxDQUFDLENBQUE7UUFFRDs7O1dBR0c7UUFDSCxlQUFVLEdBQUcsd0JBQVUsRUFBbUQsQ0FBQTtRQXhEeEUsTUFBTSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxHQUFHLEtBQUssQ0FBQTtRQUNqRSw4RkFBOEY7UUFDOUYsbUNBQUssQ0FBQyxPQUFPLElBQUksWUFBWSxFQUFFLDBDQUEwQyxDQUFDLENBQUE7UUFDMUUsc0dBQXNHO1FBQ3RHLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxxQ0FBdUIsQ0FBQyxhQUFhLENBQUM7WUFDakU7OztlQUdHO2FBQ0YsWUFBWSxDQUFDLFNBQVMsRUFBRSxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLDhDQUFnQixDQUFDLCtCQUErQixFQUFFLENBQUMsQ0FBQTtRQUU5RyxNQUFNLFFBQVEsR0FBRyxLQUFLLEVBQUUsUUFBcUMsRUFBRSxFQUFFO1lBQy9EOzs7O2VBSUc7WUFDSCxNQUFNLEdBQUcsR0FBRywwQkFBMEIsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDM0UsTUFBTSxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUE7WUFFdEMsT0FBTyxhQUFhLENBQUMsWUFBWSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUE7UUFDOUUsQ0FBQyxDQUFBO1FBRUQsTUFBTSxVQUFVLEdBQUcsS0FBSyxFQUFFLFFBQXFDLEVBQUUsR0FBcUIsRUFBRSxFQUFFO1lBQ3hGOzs7O2VBSUc7WUFDSCxNQUFNLEdBQUcsR0FBRywwQkFBMEIsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDM0UsTUFBTSxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUE7WUFFdEMsT0FBTyxlQUFlLENBQUMsWUFBWSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQ3JGLENBQUMsQ0FBQTtRQUVELDhDQUFnQixDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFDMUMsOENBQWdCLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxZQUFZLENBQUMsQ0FBQTtRQUNwRCw4Q0FBZ0IsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQzVDLDhDQUFnQixDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUE7SUFDbEQsQ0FBQztJQUVELE9BQU8sQ0FBRSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQW9CO1FBQ3JELE1BQU0sRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFBO1FBQ3RDLE9BQU8sVUFBVSxLQUFLLFlBQVksSUFBSSxZQUFZLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3hFLENBQUM7SUFjRCxNQUFNLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBRSxTQUFxQixFQUFFLGFBQXNDO1FBQ3pGLG1DQUFLLENBQUMsU0FBUyxZQUFZLFVBQVUsRUFBRSw4QkFBOEIsQ0FBQyxDQUFBO1FBQ3RFLE1BQU0sUUFBUSxHQUFHLElBQUkscUNBQXVCLENBQUMsYUFBYSxDQUFDO1lBQ3pEOzs7Y0FHRTthQUNELHFCQUFxQixDQUFDLFNBQVMsRUFBRSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsOENBQWdCLENBQUMsK0JBQStCLEVBQUUsQ0FBQyxDQUFBO1FBQ25KLE9BQU8sd0NBQW1CLEVBQUU7YUFDekIsSUFBSSxDQUFDLHNDQUFpQixDQUFDO2FBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLDhDQUFnQixDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ2pGLENBQUM7Q0FDRjtBQTlFRCx3REE4RUM7QUFDRCw0Q0FBYyxDQUFDLHNCQUFzQixDQUFDLENBQUE7QUFFdEM7Ozs7Ozs7OztHQVNHO0FBQ0gsS0FBSyxVQUFVLGFBQWEsQ0FDMUIsWUFBb0IsRUFDcEIsT0FBZSxFQUNmLFFBQXFDLEVBQ3JDLEdBQWUsRUFDZixnQkFBeUM7SUFFekMsTUFBTSxPQUFPLEdBQUcsTUFBTSx3Q0FBbUIsRUFBRSxDQUFBO0lBQzNDLE1BQU0sRUFBRSxHQUFHLE1BQU0sT0FBTyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBRTlELE1BQU0sbUJBQW1CLEdBQUcsK0NBQWlCLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFBO0lBQ25GLE1BQU0sSUFBSSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUE7SUFDN0IsTUFBTSxPQUFPLEdBQUcsMkNBQWEsQ0FBQyxRQUFRLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUFBO0lBQy9ELE1BQU0sTUFBTSxHQUFHLE1BQU0sbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ2hFLE1BQU0sVUFBVSxHQUFHLElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUM5RixNQUFNLE9BQU8sR0FBRyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUV4RixNQUFNLEdBQUcsR0FBRyxzQkFBc0IsQ0FBQyxZQUFZLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDbEYsT0FBTyxRQUFRLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxDQUFBO0FBQ3hELENBQUM7QUFFRDs7Ozs7Ozs7OztHQVVHO0FBQ0gsS0FBSyxVQUFVLGVBQWUsQ0FDNUIsWUFBb0IsRUFDcEIsT0FBZSxFQUNmLFFBQXFDLEVBQ3JDLGdCQUF5QyxFQUN6QyxHQUFxQixFQUNyQixHQUFlO0lBRWYsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLFFBQVEsQ0FBQTtJQUMxQixNQUFNLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsR0FBRyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBRTdFLE1BQU0sT0FBTyxHQUFHLE1BQU0sd0NBQW1CLEVBQUUsQ0FBQTtJQUUzQyxNQUFNLG1CQUFtQixHQUFHLCtDQUFpQixDQUFDLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQTtJQUNuRixNQUFNLElBQUksR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFBO0lBQzdCLE1BQU0sTUFBTSxHQUFHLE1BQU0sbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLHlCQUFhLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUE7SUFDM0YsTUFBTSxLQUFLLEdBQUcsRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsQ0FBQTtJQUM1RCxRQUFRLENBQUMscUJBQXFCLENBQUMsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUE7SUFDN0QsT0FBTyxrRUFBb0MsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUN2RCxDQUFDIn0=