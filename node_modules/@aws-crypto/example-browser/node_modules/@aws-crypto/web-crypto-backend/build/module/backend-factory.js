/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { isMsWindow } from '@aws-crypto/ie11-detection';
import { supportsWebCrypto, supportsSubtleCrypto, supportsZeroByteGCM } from '@aws-crypto/supports-web-crypto';
import { synchronousRandomValues as randomValues } from './synchronous_random_values';
import promisifyMsSubtleCrypto from './promisify-ms-crypto';
export function webCryptoBackendFactory(window) {
    const fallbackRequiredPromise = windowRequiresFallback(window);
	console.log(fallbackRequiredPromise);
    let webCryptoFallbackPromise = false;
    return { getWebCryptoBackend, configureFallback };
    async function getWebCryptoBackend() {
        /* Precondition: Access to a secure random source is required. */
        try {
            randomValues(1);
        }
        catch (ex) {
            throw new Error('No supported secure random');
        }
        const fallbackRequired = await fallbackRequiredPromise;
		console.log(fallbackRequired);
        const subtle = pluckSubtleCrypto(window);
        const webCryptoFallback = await webCryptoFallbackPromise;
        /* Postcondition: If a a subtle backend exists and a fallback is required, one must be configured.
         * In this case the subtle backend does not support zero byte GCM operations.
         */
        if (subtle && fallbackRequired && !webCryptoFallback) {
            throw new Error('A Fallback is required for zero byte AES-GCM operations.');
        }
        /* Postcondition: If no SubtleCrypto exists, a fallback must configured. */
        if (!subtle && !webCryptoFallback) {
            throw new Error('A Fallback is required because no subtle backend exists.');
        }
        if (!fallbackRequired && subtle) {
            return { subtle, randomValues };
        }
        if (fallbackRequired && subtle && webCryptoFallback) {
            return { nonZeroByteSubtle: subtle, randomValues, zeroByteSubtle: webCryptoFallback };
        }
        if (fallbackRequired && !subtle && webCryptoFallback) {
            return { subtle: webCryptoFallback, randomValues };
        }
        throw new Error('unknown error');
    }
    async function configureFallback(fallback) {
        console.log(fallback);
		const fallbackRequired = await fallbackRequiredPromise;
		console.log(fallbackRequired);
        /* Precondition: If a fallback is not required, do not configure one. */
        if (!fallbackRequired) {
            return;
        }
        /* Precondition: Can not reconfigure fallback. */
        if (webCryptoFallbackPromise)
            throw new Error('Fallback reconfiguration denied');
        /* Precondition: Fallback must look like it supports the required operations. */
        if (!supportsSubtleCrypto(fallback))
            throw new Error('Fallback does not support WebCrypto');
        // This if to lock the fallback.
        // when using the fallback, it is simpler
        // for the customer to not await the success
        // of configuration so we handle it for them
        // I still return in case they want to await
        webCryptoFallbackPromise = supportsZeroByteGCM(fallback)
            .then(zeroByteGCMSupport => {
            /* Postcondition: The fallback must specifically support ZeroByteGCM. */
            if (!zeroByteGCMSupport)
                throw new Error('Fallback does not support zero byte AES-GCM');
            return fallback;
        });
        return webCryptoFallbackPromise;
    }
}
export function getNonZeroByteBackend(backend) {
    /* Precondition: A backend must be passed to get a non zero byte backend. */
    if (!backend)
        throw new Error('No supported backend.');
    return backend.subtle ||
        backend.nonZeroByteSubtle;
}
export function getZeroByteSubtle(backend) {
    /* Precondition: A backend must be passed to get a zero byte backend. */
    if (!backend)
        throw new Error('No supported backend.');
    return backend.subtle ||
        backend.zeroByteSubtle;
}
export async function windowRequiresFallback(window) {
    const subtle = pluckSubtleCrypto(window);
	console.log(subtle);
    if (!subtle)
        return true;
    const zeroByteSupport = await supportsZeroByteGCM(subtle);
    return !zeroByteSupport;
}
export function pluckSubtleCrypto(window) {
    // if needed webkitSubtle check should be added here
    // see: https://webkit.org/blog/7790/update-on-web-cryptography/
    if (supportsWebCrypto(window))
        return window.crypto.subtle;
    if (isMsWindow(window))
        return promisifyMsSubtleCrypto(window.msCrypto.subtle);
    return false;
}
export function isFullSupportWebCryptoBackend(backend) {
    return !!backend.subtle;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZC1mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2JhY2tlbmQtZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztHQWFHO0FBRUgsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFBO0FBQ3ZELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxvQkFBb0IsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFBO0FBQzlHLE9BQU8sRUFBRSx1QkFBdUIsSUFBSSxZQUFZLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQTtBQUNyRixPQUFPLHVCQUF1QixNQUFNLHVCQUF1QixDQUFBO0FBYzNELE1BQU0sVUFBVSx1QkFBdUIsQ0FBRSxNQUFjO0lBQ3JELE1BQU0sdUJBQXVCLEdBQUcsc0JBQXNCLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDOUQsSUFBSSx3QkFBd0IsR0FBZ0MsS0FBSyxDQUFBO0lBRWpFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxpQkFBaUIsRUFBRSxDQUFBO0lBRWpELEtBQUssVUFBVSxtQkFBbUI7UUFDaEMsaUVBQWlFO1FBQ2pFLElBQUk7WUFDRixZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDaEI7UUFBQyxPQUFPLEVBQUUsRUFBRTtZQUNYLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtTQUM5QztRQUVELE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSx1QkFBdUIsQ0FBQTtRQUN0RCxNQUFNLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUN4QyxNQUFNLGlCQUFpQixHQUFHLE1BQU0sd0JBQXdCLENBQUE7UUFFeEQ7O1dBRUc7UUFDSCxJQUFJLE1BQU0sSUFBSSxnQkFBZ0IsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ3BELE1BQU0sSUFBSSxLQUFLLENBQUMsMERBQTBELENBQUMsQ0FBQTtTQUM1RTtRQUVE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