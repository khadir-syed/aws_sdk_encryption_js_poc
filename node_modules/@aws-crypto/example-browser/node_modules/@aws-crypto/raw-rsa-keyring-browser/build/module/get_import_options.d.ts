import { // eslint-disable-line no-unused-vars
RsaJsonWebKey, // eslint-disable-line no-unused-vars
RsaImportableKey, // eslint-disable-line no-unused-vars
RsaWrappingKeyAlgorithm } from './types';
import { MixedBackendCryptoKey } from '@aws-crypto/material-management-browser';
export declare function getImportOptions(keyInfo: RsaImportableKey): {
    format: string;
    key: RsaJsonWebKey;
    wrappingAlgorithm: Readonly<{
        name: "RSA-OAEP" | "RSA-OAEP-256" | "RSA-OAEP-384" | "RSA-OAEP-512";
        hash: Readonly<Readonly<{
            name: "SHA-256" | "SHA-384" | "SHA-1" | "SHA-512";
        }>>;
    }>;
} | {
    format: "spki" | "pkcs8" | import("./types").Format | "raw";
    key: Uint8Array;
    wrappingAlgorithm: Readonly<{
        name: "RSA-OAEP" | "RSA-OAEP-256" | "RSA-OAEP-384" | "RSA-OAEP-512";
        hash: Readonly<Readonly<{
            name: "SHA-256" | "SHA-384" | "SHA-1" | "SHA-512";
        }>>;
    }>;
};
export declare function getWrappingAlgorithm(publicKey?: CryptoKey, privateKey?: CryptoKey | MixedBackendCryptoKey): Readonly<{
    name: "RSA-OAEP" | "RSA-OAEP-256" | "RSA-OAEP-384" | "RSA-OAEP-512";
    hash: Readonly<Readonly<{
        name: "SHA-256" | "SHA-384" | "SHA-1" | "SHA-512";
    }>>;
}>;
export declare function extract(key: CryptoKey): RsaWrappingKeyAlgorithm;
export declare function verify(...args: RsaWrappingKeyAlgorithm[]): Readonly<{
    name: "RSA-OAEP" | "RSA-OAEP-256" | "RSA-OAEP-384" | "RSA-OAEP-512";
    hash: Readonly<Readonly<{
        name: "SHA-256" | "SHA-384" | "SHA-1" | "SHA-512";
    }>>;
}>;
export declare function flattenMixedCryptoKey(key?: CryptoKey | MixedBackendCryptoKey): CryptoKey[];
//# sourceMappingURL=get_import_options.d.ts.map