/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { KeyringWebCrypto, needs, // eslint-disable-line no-unused-vars
EncryptedDataKey, // eslint-disable-line no-unused-vars
KeyringTraceFlag, immutableClass, readOnlyProperty, bytes2JWK, keyUsageForMaterial, importForWebCryptoEncryptionMaterial, unwrapDataKey } from '@aws-crypto/material-management-browser';
import { getWebCryptoBackend, getNonZeroByteBackend, isFullSupportWebCryptoBackend } from '@aws-crypto/web-crypto-backend';
import { _onEncrypt, _onDecrypt } from '@aws-crypto/raw-keyring';
import { randomValuesOnly } from '@aws-crypto/random-source-browser';
import { getImportOptions, getWrappingAlgorithm, flattenMixedCryptoKey } from './get_import_options';
export class RawRsaKeyringWebCrypto extends KeyringWebCrypto {
    constructor(input) {
        super();
        this._rawOnEncrypt = _onEncrypt(randomValuesOnly);
        this._onEncrypt = async (material) => {
            const _material = await this._rawOnEncrypt(material);
            return importForWebCryptoEncryptionMaterial(_material);
        };
        /* onDecrypt does not need to import the CryptoKey, because this is handled in the unwrap operation.
         * Encrypt needs to have access to the unencrypted data key to encrypt with other keyrings
         * but once I have functional material no other decrypt operations need to be performed.
         */
        this._onDecrypt = _onDecrypt();
        const { publicKey, privateKey, keyName, keyNamespace } = input;
        /* Precondition: RsaKeyringWebCrypto needs either a public or a private key to operate. */
        needs(publicKey || privateKey, 'No Key provided.');
        /* Precondition: RsaKeyringWebCrypto needs identifying information for encrypt and decrypt. */
        needs(keyName && keyNamespace, 'Identifying information must be defined.');
        const wrappingAlgorithm = getWrappingAlgorithm(publicKey, privateKey);
        const _wrapKey = async (material) => {
            /* Precondition: I must have a publicKey to wrap. */
            if (!publicKey)
                throw new Error('No publicKey configured, encrypt not supported.');
            // The nonZero backend is used because some browsers support Subtle Crypto
            // but do not support Zero Byte AES-GCM. I want to use the native
            // browser implementation of wrapKey
            const subtle = getNonZeroByteBackend(await getWebCryptoBackend());
            /* Can not use importCryptoKey as `wrapKey` requires extractable = true
             * In web crypto `wrapKey` is a composition of `export` and `encrypt` and
             * so the cryptoKey must have `extractable = true`.
             */
            const extractable = true;
            const { encryption } = material.suite;
            const importFormat = 'jwk';
            const keyUsages = ['wrapKey']; // limit the use of this key (*not* decrypt, encrypt, deriveKey)
            const jwk = bytes2JWK(unwrapDataKey(material.getUnencryptedDataKey()));
            const cryptoKey = await subtle.importKey(importFormat, jwk, encryption, extractable, keyUsages);
            const wrapFormat = 'raw';
            const encryptedArrayBuffer = await subtle.wrapKey(wrapFormat, cryptoKey, publicKey, wrappingAlgorithm);
            // Can the extractable setting of cryptoKey be changed to false here?  If so, do it.
            const edk = new EncryptedDataKey({
                providerId: keyNamespace,
                providerInfo: keyName,
                encryptedDataKey: new Uint8Array(encryptedArrayBuffer)
            });
            return material.addEncryptedDataKey(edk, KeyringTraceFlag.WRAPPING_KEY_ENCRYPTED_DATA_KEY);
        };
        /* returns either an array of 1 CryptoKey or an array of both from MixedBackendCryptoKey e.g.
         * [privateKey] || [nonZeroByteCryptoKey, zeroByteCryptoKey]
         */
        const privateKeys = flattenMixedCryptoKey(privateKey);
        const _unwrapKey = async (material, edk) => {
            /* Precondition: I must have a privateKey to unwrap. */
            if (!privateKey)
                throw new Error('No privateKey configured, decrypt not supported.');
            const backend = await getWebCryptoBackend();
            const { suite } = material;
            const trace = {
                keyName: this.keyName,
                keyNamespace: this.keyNamespace,
                flags: KeyringTraceFlag.WRAPPING_KEY_DECRYPTED_DATA_KEY
            };
            const format = 'raw';
            const extractable = false;
            const algorithm = suite.kdf ? suite.kdf : suite.encryption;
            const keyUsages = [keyUsageForMaterial(material)];
            const importArgs = [
                format,
                edk.encryptedDataKey,
                privateKeys[0],
                wrappingAlgorithm,
                algorithm,
                extractable,
                keyUsages
            ];
            /* This is superior to importForWebCryptoDecryptionMaterial.
             * Here I use `subtle.unwrap` and bring the unencrypted data key into the WebCrypto world
             * without ever exposing the unencrypted data key to JavaScript.
             */
            if (isFullSupportWebCryptoBackend(backend)) {
                const cryptoKey = await backend.subtle.unwrapKey(...importArgs);
                return material.setCryptoKey(cryptoKey, trace);
            }
            else {
                const importZeroBackend = [...importArgs];
                importZeroBackend[2] = privateKeys[1];
                const mixedDataKey = await Promise.all([
                    backend.nonZeroByteSubtle.unwrapKey(...importArgs),
                    backend.zeroByteSubtle.unwrapKey(...importZeroBackend)
                ]).then(([nonZeroByteCryptoKey, zeroByteCryptoKey]) => ({ nonZeroByteCryptoKey, zeroByteCryptoKey }));
                return material.setCryptoKey(mixedDataKey, trace);
            }
        };
        readOnlyProperty(this, 'keyName', keyName);
        readOnlyProperty(this, 'keyNamespace', keyNamespace);
        readOnlyProperty(this, '_wrapKey', _wrapKey);
        readOnlyProperty(this, '_unwrapKey', _unwrapKey);
    }
    _filter({ providerId, providerInfo }) {
        const { keyNamespace, keyName } = this;
        return providerId === keyNamespace && providerInfo.startsWith(keyName);
    }
    static async importPublicKey(publicKey) {
        const { wrappingAlgorithm, format, key } = getImportOptions(publicKey);
        const backend = await getWebCryptoBackend();
        const subtle = getNonZeroByteBackend(backend);
        return subtle.importKey(format, key, wrappingAlgorithm, false, ['wrapKey']);
    }
    static async importPrivateKey(privateKey) {
        const { wrappingAlgorithm, format, key } = getImportOptions(privateKey);
        const backend = await getWebCryptoBackend();
        if (isFullSupportWebCryptoBackend(backend)) {
            return backend.subtle.importKey(format, key, wrappingAlgorithm, false, ['unwrapKey']);
        }
        else {
            return Promise.all([
                backend.nonZeroByteSubtle.importKey(format, key, wrappingAlgorithm, false, ['unwrapKey']),
                backend.zeroByteSubtle.importKey(format, key, wrappingAlgorithm, false, ['unwrapKey'])
            ]).then(([nonZeroByteCryptoKey, zeroByteCryptoKey]) => ({ nonZeroByteCryptoKey, zeroByteCryptoKey }));
        }
    }
}
immutableClass(RawRsaKeyringWebCrypto);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF3X3JzYV9rZXlyaW5nX3dlYl9jcnlwdG8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmF3X3JzYV9rZXlyaW5nX3dlYl9jcnlwdG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUVILE9BQU8sRUFDTCxnQkFBZ0IsRUFDaEIsS0FBSyxFQUV3QixxQ0FBcUM7QUFDbEUsZ0JBQWdCLEVBQ0YscUNBQXFDO0FBQ25ELGdCQUFnQixFQUNoQixjQUFjLEVBQ2QsZ0JBQWdCLEVBQ2hCLFNBQVMsRUFDVCxtQkFBbUIsRUFDbkIsb0NBQW9DLEVBQ3BDLGFBQWEsRUFHZCxNQUFNLHlDQUF5QyxDQUFBO0FBRWhELE9BQU8sRUFDTCxtQkFBbUIsRUFDbkIscUJBQXFCLEVBQ3JCLDZCQUE2QixFQUM5QixNQUFNLGdDQUFnQyxDQUFBO0FBQ3ZDLE9BQU8sRUFDTCxVQUFVLEVBQ1YsVUFBVSxFQUdYLE1BQU0seUJBQXlCLENBQUE7QUFDaEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sbUNBQW1DLENBQUE7QUFFcEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLG9CQUFvQixFQUFFLHFCQUFxQixFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFFcEcsTUFBTSxPQUFPLHNCQUF1QixTQUFRLGdCQUFnQjtJQU0xRCxZQUFhLEtBQWtDO1FBQzdDLEtBQUssRUFBRSxDQUFBO1FBdUdULGtCQUFhLEdBQUcsVUFBVSxDQUFrRCxnQkFBZ0IsQ0FBQyxDQUFBO1FBQzdGLGVBQVUsR0FBRyxLQUFLLEVBQUUsUUFBcUMsRUFBRSxFQUFFO1lBQzNELE1BQU0sU0FBUyxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUNwRCxPQUFPLG9DQUFvQyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3hELENBQUMsQ0FBQTtRQUVEOzs7V0FHRztRQUNILGVBQVUsR0FBRyxVQUFVLEVBQW1ELENBQUE7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