/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { needs } from '@aws-crypto/material-management';
const UINT8_OVERFLOW = 2 ** 8;
export function uInt8(number) {
    /* Precondition: Number must be 0-(2^8 - 1). */
    needs(number < UINT8_OVERFLOW && number >= 0, 'number out of bounds.');
    const buff = new Uint8Array(1);
    const view = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);
    view.setUint8(0, number);
    return buff;
}
const UINT16__OVERFLOW = 2 ** 16;
export function uInt16BE(number) {
    /* Precondition: Number must be 0-(2^16 - 1). */
    needs(number < UINT16__OVERFLOW && number >= 0, 'number out of bounds.');
    const buff = new Uint8Array(2);
    const view = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);
    view.setUint16(0, number, false); // big-endian
    return buff;
}
const UINT32__OVERFLOW = 2 ** 32;
export function uInt32BE(number) {
    /* Precondition: Number must be 0-(2^32 - 1). */
    needs(number < UINT32__OVERFLOW && number >= 0, 'number out of bounds.');
    const buff = new Uint8Array(4);
    const view = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);
    view.setUint32(0, number, false); // big-endian
    return buff;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWludF91dGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3VpbnRfdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztHQWFHO0FBRUgsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGlDQUFpQyxDQUFBO0FBRXZELE1BQU0sY0FBYyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDN0IsTUFBTSxVQUFVLEtBQUssQ0FBRSxNQUFhO0lBQ2xDLCtDQUErQztJQUMvQyxLQUFLLENBQUMsTUFBTSxHQUFHLGNBQWMsSUFBSSxNQUFNLElBQUksQ0FBQyxFQUFFLHVCQUF1QixDQUFDLENBQUE7SUFFdEUsTUFBTSxJQUFJLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDOUIsTUFBTSxJQUFJLEdBQUcsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUN4RSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUN4QixPQUFPLElBQUksQ0FBQTtBQUNiLENBQUM7QUFFRCxNQUFNLGdCQUFnQixHQUFHLENBQUMsSUFBSSxFQUFFLENBQUE7QUFDaEMsTUFBTSxVQUFVLFFBQVEsQ0FBRSxNQUFjO0lBQ3RDLGdEQUFnRDtJQUNoRCxLQUFLLENBQUMsTUFBTSxHQUFHLGdCQUFnQixJQUFJLE1BQU0sSUFBSSxDQUFDLEVBQUUsdUJBQXVCLENBQUMsQ0FBQTtJQUV4RSxNQUFNLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUM5QixNQUFNLElBQUksR0FBRyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ3hFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQSxDQUFDLGFBQWE7SUFDOUMsT0FBTyxJQUFJLENBQUE7QUFDYixDQUFDO0FBRUQsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFBO0FBQ2hDLE1BQU0sVUFBVSxRQUFRLENBQUUsTUFBYztJQUN0QyxnREFBZ0Q7SUFDaEQsS0FBSyxDQUFDLE1BQU0sR0FBRyxnQkFBZ0IsSUFBSSxNQUFNLElBQUksQ0FBQyxFQUFFLHVCQUF1QixDQUFDLENBQUE7SUFFeEUsTUFBTSxJQUFJLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDOUIsTUFBTSxJQUFJLEdBQUcsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUN4RSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUEsQ0FBQyxhQUFhO0lBQzlDLE9BQU8sSUFBSSxDQUFBO0FBQ2IsQ0FBQyJ9