/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { needs, // eslint-disable-line no-unused-vars
isCryptoKey, isValidCryptoKey, keyUsageForMaterial, subtleFunctionForMaterial, unwrapDataKey } from '@aws-crypto/material-management';
import { getWebCryptoBackend, getNonZeroByteBackend, getZeroByteSubtle, isFullSupportWebCryptoBackend } from '@aws-crypto/web-crypto-backend';
import { bytes2JWK } from './bytes2_jwk';
export const getEncryptHelper = async (material) => {
    const backend = await getWebCryptoBackend();
    /* Precondition: WebCryptoEncryptionMaterial must have a valid data key. */
    needs(material.hasValidKey(), 'Material has no CryptoKey.');
    const { signatureHash } = material.suite;
    const kdfGetSubtleEncrypt = getSubtleFunction(material, backend, 'encrypt');
    return Object.freeze({
        kdfGetSubtleEncrypt,
        subtleSign: signatureHash ? getSubtleSign : undefined,
        dispose
    });
    function getSubtleSign(data) {
        if (!signatureHash)
            throw new Error('Algorithm suite does not support signing.');
        const { signatureKey } = material;
        if (!signatureKey)
            throw new Error('Malformed Material.');
        const { privateKey } = signatureKey;
        if (!isCryptoKey(privateKey))
            throw new Error('Malformed Material.');
        const algorithm = { name: 'ECDSA', hash: { name: signatureHash } };
        return getNonZeroByteBackend(backend).sign(algorithm, privateKey, data);
    }
    function dispose() {
        material.zeroUnencryptedDataKey();
    }
};
export const getDecryptionHelper = async (material) => {
    const backend = await getWebCryptoBackend();
    /* Precondition: WebCryptoDecryptionMaterial must have a valid data key. */
    needs(material.hasValidKey(), 'Material has no valid data key.');
    const { signatureHash } = material.suite;
    const kdfGetSubtleDecrypt = getSubtleFunction(material, backend, 'decrypt');
    return Object.freeze({
        kdfGetSubtleDecrypt,
        subtleVerify: signatureHash ? subtleVerify : undefined,
        dispose
    });
    function subtleVerify(signature, data) {
        if (!signatureHash)
            throw new Error('Algorithm suite does not support signing.');
        const { verificationKey } = material;
        if (!verificationKey)
            throw new Error('Malformed Material.');
        const { publicKey } = verificationKey;
        if (!isCryptoKey(publicKey))
            throw new Error('Malformed Material.');
        const algorithm = { name: 'ECDSA', hash: { name: signatureHash } };
        return getNonZeroByteBackend(backend).verify(algorithm, publicKey, signature, data);
    }
    function dispose() {
        material.zeroUnencryptedDataKey();
    }
};
export function getSubtleFunction(material, backend, subtleFunction = subtleFunctionForMaterial(material)) {
    /* Precondition: The material must have a CryptoKey. */
    needs(material.hasCryptoKey, 'Material must have a CryptoKey.');
    const cryptoKey = material.getCryptoKey();
    /* Precondition: The cryptoKey and backend must match in terms of Mixed vs Full support. */
    needs(isCryptoKey(cryptoKey) === isFullSupportWebCryptoBackend(backend), 'CryptoKey vs WebCrypto backend mismatch.');
    const { suite } = material;
    const { encryption: cipherName, ivLength, tagLength } = suite;
    return (info) => {
        const derivedKeyPromise = isCryptoKey(cryptoKey)
            ? WebCryptoKdf(getNonZeroByteBackend(backend), material, cryptoKey, [subtleFunction], info)
            : Promise.all([
                WebCryptoKdf(getNonZeroByteBackend(backend), material, cryptoKey.nonZeroByteCryptoKey, [subtleFunction], info),
                WebCryptoKdf(getZeroByteSubtle(backend), material, cryptoKey.zeroByteCryptoKey, [subtleFunction], info)
            ]).then(([nonZeroByteCryptoKey, zeroByteCryptoKey]) => ({ nonZeroByteCryptoKey, zeroByteCryptoKey }));
        return (iv, additionalData) => {
            /* Precondition: The length of the IV must match the WebCryptoAlgorithmSuite specification. */
            needs(iv.byteLength === ivLength, 'Iv length does not match algorithm suite specification');
            return async (data) => {
                const deriveKey = await derivedKeyPromise;
                if (isCryptoKey(deriveKey) && isFullSupportWebCryptoBackend(backend)) {
                    const { subtle } = backend;
                    const algorithm = { name: cipherName, iv, additionalData, tagLength };
                    return subtle[subtleFunction](algorithm, deriveKey, data);
                }
                else if (!isCryptoKey(deriveKey) && !isFullSupportWebCryptoBackend(backend)) {
                    const { nonZeroByteSubtle, zeroByteSubtle } = backend;
                    const { nonZeroByteCryptoKey, zeroByteCryptoKey } = deriveKey;
                    const algorithm = { name: cipherName, iv, additionalData, tagLength };
                    if (data.byteLength) {
                        return nonZeroByteSubtle[subtleFunction](algorithm, nonZeroByteCryptoKey, data);
                    }
                    else {
                        return zeroByteSubtle[subtleFunction](algorithm, zeroByteCryptoKey, data);
                    }
                }
                // This should be impossible
                throw new Error('Unknown Error');
            };
        };
    };
}
export async function WebCryptoKdf(subtle, material, cryptoKey, keyUsages, info) {
    const { kdf, kdfHash, keyLength, encryption } = material.suite;
    /* Check for early return (Postcondition): No WebCrypto KDF, just return the unencrypted data key. */
    if (!kdf && !kdfHash)
        return cryptoKey;
    /* Precondition: Valid HKDF values must exist for browsers. */
    needs(kdf === 'HKDF' &&
        kdfHash &&
        info instanceof Uint8Array &&
        info.byteLength, 'Invalid HKDF values.');
    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams
    const kdfAlgorithm = { name: kdf, hash: { name: kdfHash }, info, salt: new Uint8Array() };
    const derivedKeyAlgorithm = { name: encryption, length: keyLength };
    const extractable = false;
    const deriveKey = await subtle
        .deriveKey(
    // @ts-ignore types need to be updated see: https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams
    kdfAlgorithm, cryptoKey, derivedKeyAlgorithm, extractable, keyUsages);
    /* Postcondition: The derived key must conform to the algorith suite specification. */
    needs(isValidCryptoKey(deriveKey, material), 'Invalid derived key');
    return deriveKey;
}
export async function importCryptoKey(backend, material, keyUsages = [keyUsageForMaterial(material)]) {
    if (isFullSupportWebCryptoBackend(backend)) {
        return _importCryptoKey(backend.subtle, material, keyUsages);
    }
    else {
        return Promise.all([
            _importCryptoKey(getNonZeroByteBackend(backend), material, keyUsages),
            _importCryptoKey(getZeroByteSubtle(backend), material, keyUsages)
        ]).then(([nonZeroByteCryptoKey, zeroByteCryptoKey]) => ({ nonZeroByteCryptoKey, zeroByteCryptoKey }));
    }
}
export async function _importCryptoKey(subtle, material, keyUsages = [keyUsageForMaterial(material)]) {
    const { suite } = material;
    const extractable = false;
    const udk = unwrapDataKey(material.getUnencryptedDataKey());
    if (suite.kdf) {
        /* For several browsers, import for a key to derive with HKDF
         * *must* be raw.  This may cause some compatibility issues
         * with browsers that need a zero byte gcm fallback.
         */
        const format = 'raw';
        const algorithm = suite.kdf;
        return subtle.importKey(format, udk, algorithm, extractable, keyUsages);
    }
    else {
        const format = 'jwk';
        const algorithm = suite.encryption;
        const jwk = bytes2JWK(udk);
        return subtle.importKey(format, jwk, algorithm, extractable, keyUsages);
    }
}
//# sourceMappingURL=data:application/json;base64,