"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const material_helpers_1 = require("./material_helpers");
const web_crypto_backend_1 = require("@aws-crypto/web-crypto-backend");
async function importForWebCryptoEncryptionMaterial(material) {
    /* Check for early return (Postcondition): If a cryptoKey has already been imported for encrypt, return. */
    if (material.hasUnencryptedDataKey && material.hasCryptoKey)
        return material;
    return importCryptoKeyToMaterial(material);
}
exports.importForWebCryptoEncryptionMaterial = importForWebCryptoEncryptionMaterial;
async function importForWebCryptoDecryptionMaterial(material) {
    /* Check for early return (Postcondition): If a cryptoKey has already been imported for decrypt, return. */
    if (material.hasValidKey())
        return material;
    /* Check for early return (Postcondition): If no key was able to be decrypted, return. */
    if (!material.hasUnencryptedDataKey)
        return material;
    return (await importCryptoKeyToMaterial(material))
        /* Now that a cryptoKey has been imported, the unencrypted data key can be zeroed.
         * this is safe, because one and only one EncryptedDataKey should be used to
         * set the unencrypted data key on the material,
         * and in the browser, all crypto operations are done with a CryptoKey
         */
        .zeroUnencryptedDataKey();
}
exports.importForWebCryptoDecryptionMaterial = importForWebCryptoDecryptionMaterial;
async function importCryptoKeyToMaterial(material) {
    const backend = await web_crypto_backend_1.getWebCryptoBackend();
    const cryptoKey = await material_helpers_1.importCryptoKey(backend, material);
    // The trace is only set when the material does not already have
    // an hasUnencryptedDataKey.  This is an implementation detail :(
    const [trace] = material.keyringTrace;
    return material.setCryptoKey(cryptoKey, trace);
}
exports.importCryptoKeyToMaterial = importCryptoKeyToMaterial;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5cmluZ19oZWxwZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2tleXJpbmdfaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7R0FhRzs7QUFRSCx5REFFMkI7QUFFM0IsdUVBRXVDO0FBRWhDLEtBQUssVUFBVSxvQ0FBb0MsQ0FBRSxRQUFxQztJQUMvRiwyR0FBMkc7SUFDM0csSUFBSSxRQUFRLENBQUMscUJBQXFCLElBQUksUUFBUSxDQUFDLFlBQVk7UUFBRSxPQUFPLFFBQVEsQ0FBQTtJQUU1RSxPQUFPLHlCQUF5QixDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQzVDLENBQUM7QUFMRCxvRkFLQztBQUVNLEtBQUssVUFBVSxvQ0FBb0MsQ0FBRSxRQUFxQztJQUMvRiwyR0FBMkc7SUFDM0csSUFBSSxRQUFRLENBQUMsV0FBVyxFQUFFO1FBQUUsT0FBTyxRQUFRLENBQUE7SUFDM0MseUZBQXlGO0lBQ3pGLElBQUksQ0FBQyxRQUFRLENBQUMscUJBQXFCO1FBQUUsT0FBTyxRQUFRLENBQUE7SUFFcEQsT0FBTyxDQUFDLE1BQU0seUJBQXlCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEQ7Ozs7V0FJRztTQUNGLHNCQUFzQixFQUFFLENBQUE7QUFDN0IsQ0FBQztBQWJELG9GQWFDO0FBRU0sS0FBSyxVQUFVLHlCQUF5QixDQUM3QyxRQUFXO0lBRVgsTUFBTSxPQUFPLEdBQUcsTUFBTSx3Q0FBbUIsRUFBRSxDQUFBO0lBQzNDLE1BQU0sU0FBUyxHQUFHLE1BQU0sa0NBQWUsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDMUQsZ0VBQWdFO0lBQ2hFLGlFQUFpRTtJQUNqRSxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQTtJQUNyQyxPQUFPLFFBQVEsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFBO0FBQ2hELENBQUM7QUFURCw4REFTQyJ9