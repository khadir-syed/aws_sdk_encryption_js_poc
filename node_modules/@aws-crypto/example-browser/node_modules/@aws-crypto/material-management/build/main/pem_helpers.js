"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* Before Node.js v11 the crypto module did not support
  * a method to PEM format a ECDH key.  It has always supported
  * producing such keys: `crypto.createECDH`.  But formating
  * these keys as a PEM for use in `crypto.Sign` and
  * `crypto.Verify` has not been possible in native `crypto`.
  * As Node.js v6, v8, and v10 reach end of life, this code
  * can be deleted.
  */
// @ts-ignore
const asn1_js_1 = __importDefault(require("asn1.js"));
const Rfc5915Key = asn1_js_1.default.define('Rfc5915Key', function () {
    this.seq().obj(this.key('version').int(), this.key('privateKey').octstr(), this.key('parameters').optional().explicit(0).objid({
        '1 2 840 10045 3 1 7': 'prime256v1',
        '1 3 132 0 34': 'secp384r1'
    }), this.key('publicKey').optional().explicit(1).bitstr());
});
const SpkiKey = asn1_js_1.default.define('SpkiKey', function () {
    this.seq().obj(this.key('algorithmIdentifier').seq().obj(this.key('publicKeyType').objid({
        '1 2 840 10045 2 1': 'EC'
    }), this.key('parameters').objid({
        '1 2 840 10045 3 1 7': 'prime256v1',
        '1 3 132 0 34': 'secp384r1'
    })), this.key('publicKey').bitstr());
});
function publicKeyPem(curve, publicKey) {
    const buff = SpkiKey.encode({
        algorithmIdentifier: {
            publicKeyType: 'EC',
            parameters: curve
        },
        publicKey: { data: publicKey }
    }, 'der');
    return [
        '-----BEGIN PUBLIC KEY-----',
        ...chunk64(buff),
        '-----END PUBLIC KEY-----',
        ''
    ].join('\n');
}
exports.publicKeyPem = publicKeyPem;
function privateKeyPem(curve, privateKey, publicKey) {
    const buff = Rfc5915Key.encode({
        version: 1,
        privateKey: privateKey,
        parameters: curve,
        publicKey: { data: publicKey }
    }, 'der');
    return [
        '-----BEGIN EC PRIVATE KEY-----',
        ...chunk64(buff),
        '-----END EC PRIVATE KEY-----',
        ''
    ].join('\n');
}
exports.privateKeyPem = privateKeyPem;
function chunk64(buff) {
    const chunkSize = 64;
    const str = buff.toString('base64');
    const numChunks = Math.ceil(str.length / chunkSize);
    const chunks = new Array(numChunks);
    for (let i = 0, o = 0; i < numChunks; ++i, o += chunkSize) {
        chunks[i] = str.substr(o, chunkSize);
    }
    return chunks;
}
exports.chunk64 = chunk64;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVtX2hlbHBlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGVtX2hlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7O0dBYUc7Ozs7O0FBRUg7Ozs7Ozs7SUFPSTtBQUVKLGFBQWE7QUFDYixzREFBeUI7QUFFekIsTUFBTSxVQUFVLEdBQUcsaUJBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFO0lBQzFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQ1osSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFDekIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFDL0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ2xELHFCQUFxQixFQUFFLFlBQVk7UUFDbkMsY0FBYyxFQUFFLFdBQVc7S0FDNUIsQ0FBQyxFQUNGLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUN0RCxDQUFBO0FBQ0gsQ0FBQyxDQUFDLENBQUE7QUFFRixNQUFNLE9BQU8sR0FBRyxpQkFBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7SUFDcEMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FDWixJQUFJLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUN2QyxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUM5QixtQkFBbUIsRUFBRSxJQUFJO0tBQzFCLENBQUMsRUFDRixJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUMzQixxQkFBcUIsRUFBRSxZQUFZO1FBQ25DLGNBQWMsRUFBRSxXQUFXO0tBQzVCLENBQUMsQ0FDSCxFQUNELElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQy9CLENBQUE7QUFDSCxDQUFDLENBQUMsQ0FBQTtBQUVGLFNBQWdCLFlBQVksQ0FBRSxLQUFhLEVBQUUsU0FBaUI7SUFDNUQsTUFBTSxJQUFJLEdBQVcsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUNsQyxtQkFBbUIsRUFBRTtZQUNuQixhQUFhLEVBQUUsSUFBSTtZQUNuQixVQUFVLEVBQUUsS0FBSztTQUNsQjtRQUNELFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7S0FDL0IsRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUVULE9BQU87UUFDTCw0QkFBNEI7UUFDNUIsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ2hCLDBCQUEwQjtRQUMxQixFQUFFO0tBQ0gsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDZCxDQUFDO0FBZkQsb0NBZUM7QUFFRCxTQUFnQixhQUFhLENBQUUsS0FBYSxFQUFFLFVBQWtCLEVBQUUsU0FBaUI7SUFDakYsTUFBTSxJQUFJLEdBQVcsVUFBVSxDQUFDLE1BQU0sQ0FBQztRQUNyQyxPQUFPLEVBQUUsQ0FBQztRQUNWLFVBQVUsRUFBRSxVQUFVO1FBQ3RCLFVBQVUsRUFBRSxLQUFLO1FBQ2pCLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7S0FDL0IsRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUVULE9BQU87UUFDTCxnQ0FBZ0M7UUFDaEMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ2hCLDhCQUE4QjtRQUM5QixFQUFFO0tBQ0gsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDZCxDQUFDO0FBZEQsc0NBY0M7QUFFRCxTQUFnQixPQUFPLENBQUUsSUFBWTtJQUNuQyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUE7SUFDcEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNuQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLENBQUE7SUFDbkQsTUFBTSxNQUFNLEdBQWEsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFN0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxTQUFTLEVBQUU7UUFDekQsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFBO0tBQ3JDO0lBRUQsT0FBTyxNQUFNLENBQUE7QUFDZixDQUFDO0FBWEQsMEJBV0MifQ==