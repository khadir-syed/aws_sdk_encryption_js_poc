"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const cryptographic_material_1 = require("./cryptographic_material");
const node_algorithms_1 = require("./node_algorithms");
const needs_1 = require("./needs");
function cloneMaterial(source) {
    const { suite, encryptionContext } = source;
    const clone = (suite instanceof node_algorithms_1.NodeAlgorithmSuite
        ? source instanceof cryptographic_material_1.NodeEncryptionMaterial
            ? new cryptographic_material_1.NodeEncryptionMaterial(suite, encryptionContext)
            : new cryptographic_material_1.NodeDecryptionMaterial(suite, encryptionContext)
        : source instanceof cryptographic_material_1.WebCryptoEncryptionMaterial
            ? new cryptographic_material_1.WebCryptoEncryptionMaterial(suite, encryptionContext)
            : new cryptographic_material_1.WebCryptoDecryptionMaterial(suite, encryptionContext));
    /* The setTrace _must_ be the first trace,
     * If the material is an EncryptionMaterial
     * then the data key *must* have been generated.
     * If the material is DecryptionMaterial
     * then the data key *must* have been decrypted.
     * i.e. the required flags are:
     * WRAPPING_KEY_GENERATED_DATA_KEY, WRAPPING_KEY_DECRYPTED_DATA_KEY
     * These are controlled by the material itself.
     * Furthermore, subsequent trace entries,
     * *must* be in the same order as the added encrypted data keys.
     * See cryptographic_materials.ts `decorateCryptographicMaterial`, `decorateWebCryptoMaterial`.
     */
    const [setTrace, ...traces] = source.keyringTrace.slice();
    if (source.hasUnencryptedDataKey) {
        const udk = cloneUnencryptedDataKey(source.getUnencryptedDataKey());
        clone.setUnencryptedDataKey(udk, setTrace);
    }
    if (source.hasCryptoKey) {
        const cryptoKey = source.getCryptoKey();
        clone
            .setCryptoKey(cryptoKey, setTrace);
    }
    if (cryptographic_material_1.isEncryptionMaterial(source) && cryptographic_material_1.isEncryptionMaterial(clone)) {
        const encryptedDataKeys = source.encryptedDataKeys;
        /* Precondition: For each encrypted data key, there must be a trace. */
        needs_1.needs(encryptedDataKeys.length === traces.length, 'KeyringTrace length does not match encrypted data keys.');
        encryptedDataKeys.forEach((edk, i) => {
            const { providerInfo, providerId } = edk;
            const { keyNamespace, keyName, flags } = traces[i];
            /* Precondition: The traces must be in the same order as the encrypted data keys. */
            needs_1.needs(keyName === providerInfo && keyNamespace === providerId, 'Keyring trace does not match encrypted data key.');
            clone.addEncryptedDataKey(edk, flags);
        });
        if (source.suite.signatureCurve && source.signatureKey) {
            clone.setSignatureKey(source.signatureKey);
        }
    }
    else if (cryptographic_material_1.isDecryptionMaterial(source) && cryptographic_material_1.isDecryptionMaterial(clone)) {
        /* Precondition: On Decrypt there must not be any additional traces other than the setTrace. */
        needs_1.needs(!traces.length, 'Only 1 trace is valid on DecryptionMaterials.');
        if (source.suite.signatureCurve && source.verificationKey) {
            clone.setVerificationKey(source.verificationKey);
        }
    }
    else {
        throw new Error('Material mismatch');
    }
    return clone;
}
exports.cloneMaterial = cloneMaterial;
function cloneUnencryptedDataKey(dataKey) {
    if (dataKey instanceof Uint8Array) {
        return new Uint8Array(dataKey);
    }
    return dataKey;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvbmVfY3J5cHRvZ3JhcGhpY19tYXRlcmlhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbG9uZV9jcnlwdG9ncmFwaGljX21hdGVyaWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7OztHQWFHOztBQUVILHFFQU9pQztBQUNqQyx1REFFMEI7QUFJMUIsbUNBQStCO0FBSS9CLFNBQWdCLGFBQWEsQ0FBc0IsTUFBUztJQUMxRCxNQUFNLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFLEdBQUcsTUFBTSxDQUFBO0lBRTNDLE1BQU0sS0FBSyxHQUFNLENBQUMsS0FBSyxZQUFZLG9DQUFrQjtRQUNuRCxDQUFDLENBQUMsTUFBTSxZQUFZLCtDQUFzQjtZQUN4QyxDQUFDLENBQUMsSUFBSSwrQ0FBc0IsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUM7WUFDdEQsQ0FBQyxDQUFDLElBQUksK0NBQXNCLENBQUMsS0FBSyxFQUFFLGlCQUFpQixDQUFDO1FBQ3hELENBQUMsQ0FBQyxNQUFNLFlBQVksb0RBQTJCO1lBQzdDLENBQUMsQ0FBQyxJQUFJLG9EQUEyQixDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQztZQUMzRCxDQUFDLENBQUMsSUFBSSxvREFBMkIsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUMsQ0FBQyxDQUFBO0lBRWhFOzs7Ozs7Ozs7OztPQVdHO0lBQ0gsTUFBTSxDQUFDLFFBQVEsRUFBRSxHQUFHLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUE7SUFFekQsSUFBSSxNQUFNLENBQUMscUJBQXFCLEVBQUU7UUFDaEMsTUFBTSxHQUFHLEdBQUcsdUJBQXVCLENBQUMsTUFBTSxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQTtRQUNuRSxLQUFLLENBQUMscUJBQXFCLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0tBQzNDO0lBRUQsSUFBa0MsTUFBTyxDQUFDLFlBQVksRUFBRTtRQUN0RCxNQUFNLFNBQVMsR0FBaUMsTUFBTyxDQUFDLFlBQVksRUFBRSxDQUNyRTtRQUE4QixLQUFNO2FBQ2xDLFlBQVksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUE7S0FDckM7SUFFRCxJQUFJLDZDQUFvQixDQUFDLE1BQU0sQ0FBQyxJQUFJLDZDQUFvQixDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQy9ELE1BQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFBO1FBQ2xELHVFQUF1RTtRQUN2RSxhQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxNQUFNLEVBQUUseURBQXlELENBQUMsQ0FBQTtRQUM1RyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbkMsTUFBTSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsR0FBRyxHQUFHLENBQUE7WUFDeEMsTUFBTSxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ2xELG9GQUFvRjtZQUNwRixhQUFLLENBQUMsT0FBTyxLQUFLLFlBQVksSUFBSSxZQUFZLEtBQUssVUFBVSxFQUFFLGtEQUFrRCxDQUFDLENBQUE7WUFDbEgsS0FBSyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUN2QyxDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLElBQUksTUFBTSxDQUFDLFlBQVksRUFBRTtZQUN0RCxLQUFLLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQTtTQUMzQztLQUNGO1NBQU0sSUFBSSw2Q0FBb0IsQ0FBQyxNQUFNLENBQUMsSUFBSSw2Q0FBb0IsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN0RSwrRkFBK0Y7UUFDL0YsYUFBSyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSwrQ0FBK0MsQ0FBQyxDQUFBO1FBQ3RFLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLElBQUksTUFBTSxDQUFDLGVBQWUsRUFBRTtZQUN6RCxLQUFLLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFBO1NBQ2pEO0tBQ0Y7U0FBTTtRQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtLQUNyQztJQUVELE9BQU8sS0FBSyxDQUFBO0FBQ2QsQ0FBQztBQTlERCxzQ0E4REM7QUFFRCxTQUFTLHVCQUF1QixDQUFFLE9BQXFDO0lBQ3JFLElBQUksT0FBTyxZQUFZLFVBQVUsRUFBRTtRQUNqQyxPQUFPLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0tBQy9CO0lBQ0QsT0FBTyxPQUFPLENBQUE7QUFDaEIsQ0FBQyJ9