"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const ecc_encode_1 = require("./ecc_encode");
const ecc_decode_1 = require("./ecc_decode");
const immutable_class_1 = require("./immutable_class");
const pem_helpers_1 = require("./pem_helpers");
/*
 * This public interface to the SignatureKey object is provided for
 * developers of CMMs and keyrings only. If you are a user of the AWS Encryption
 * SDK and you are not developing your own CMMs and/or keyrings, you do not
 * need to use it and you should not do so.
 */
class SignatureKey {
    constructor(privateKey, compressPoint, suite) {
        const { signatureCurve: namedCurve } = suite;
        /* Precondition: Do not create a SignatureKey for an algorithm suite that does not have an EC named curve. */
        if (!namedCurve)
            throw new Error('Unsupported Algorithm');
        /* This is unfortunately complicated.  Node v11 crypto will accept
         * a PEM formated Buffer to sign.  But the ECDH class will still
         * return Buffers that are not PEM formated, but _only_ the points
         * on the curve.  This means I have to make a choice about
         * formating.  I chose to assume that t Buffer/Uin8Array is
         * _only_ the raw points.
         */
        if (privateKey instanceof Uint8Array) {
            const pem = pem_helpers_1.privateKeyPem(namedCurve, fromBuffer(privateKey), fromBuffer(compressPoint));
            immutable_class_1.readOnlyProperty(this, 'privateKey', pem);
        }
        else {
            immutable_class_1.readOnlyProperty(this, 'privateKey', privateKey);
        }
        immutable_class_1.readOnlyBinaryProperty(this, 'compressPoint', compressPoint);
        immutable_class_1.readOnlyProperty(this, 'signatureCurve', namedCurve);
        Object.setPrototypeOf(this, SignatureKey.prototype);
        Object.freeze(this);
    }
    static encodeCompressPoint(publicKeyBytes, suite) {
        const { signatureCurve: namedCurve } = suite;
        /* Precondition: Do not return a compress point for an algorithm suite that does not have an EC named curve. */
        if (!namedCurve)
            throw new Error('Unsupported Algorithm');
        return ecc_encode_1.encodeNamedCurves[namedCurve](publicKeyBytes);
    }
}
exports.SignatureKey = SignatureKey;
immutable_class_1.frozenClass(SignatureKey);
class VerificationKey {
    constructor(publicKey, suite) {
        const { signatureCurve: namedCurve } = suite;
        /* Precondition: Do not create a VerificationKey for an algorithm suite that does not have an EC named curve. */
        if (!namedCurve)
            throw new Error('Unsupported Algorithm');
        /* This is unfortunately complicated.  Node v11 crypto will accept
         * a PEM formated Buffer to verify.  But the ECDH class will still
         * return Buffers that are not PEM formated, but _only_ the points
         * on the curve.  This means I have to make a choice about
         * formating.  I chose to assume that the Buffer/Uin8Array is
         * _only_ the raw points.
         */
        if (publicKey instanceof Uint8Array) {
            const pem = pem_helpers_1.publicKeyPem(namedCurve, fromBuffer(publicKey));
            immutable_class_1.readOnlyProperty(this, 'publicKey', pem);
        }
        else {
            immutable_class_1.readOnlyProperty(this, 'publicKey', publicKey);
        }
        immutable_class_1.readOnlyProperty(this, 'signatureCurve', namedCurve);
        Object.setPrototypeOf(this, VerificationKey.prototype);
        Object.freeze(this);
    }
    static decodeCompressPoint(compressPoint, suite) {
        const { signatureCurve: namedCurve } = suite;
        /* Precondition: Do not decode a public key for an algorithm suite that does not have an EC named curve. */
        if (!namedCurve)
            throw new Error('Unsupported Algorithm');
        return ecc_decode_1.decodeNamedCurves[namedCurve](compressPoint);
    }
}
exports.VerificationKey = VerificationKey;
immutable_class_1.frozenClass(VerificationKey);
function fromBuffer(uint) {
    const { buffer, byteOffset, byteLength } = uint;
    return Buffer.from(buffer, byteOffset, byteLength);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmF0dXJlX2tleS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zaWduYXR1cmVfa2V5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7OztHQWFHOztBQUdILDZDQUFnRDtBQUNoRCw2Q0FBZ0Q7QUFDaEQsdURBQXlGO0FBQ3pGLCtDQUEyRDtBQUczRDs7Ozs7R0FLRztBQUVILE1BQWEsWUFBWTtJQUl2QixZQUFhLFVBQXlDLEVBQUUsYUFBeUIsRUFBRSxLQUFxQjtRQUN0RyxNQUFNLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxHQUFHLEtBQUssQ0FBQTtRQUM1Qyw2R0FBNkc7UUFDN0csSUFBSSxDQUFDLFVBQVU7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUE7UUFDekQ7Ozs7OztXQU1HO1FBQ0gsSUFBSSxVQUFVLFlBQVksVUFBVSxFQUFFO1lBQ3BDLE1BQU0sR0FBRyxHQUFHLDJCQUFhLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQTtZQUN4RixrQ0FBZ0IsQ0FBNkIsSUFBSSxFQUFFLFlBQVksRUFBRSxHQUFHLENBQUMsQ0FBQTtTQUN0RTthQUFNO1lBQ0wsa0NBQWdCLENBQTZCLElBQUksRUFBRSxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUE7U0FDN0U7UUFDRCx3Q0FBc0IsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLGFBQWEsQ0FBQyxDQUFBO1FBQzVELGtDQUFnQixDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLENBQUMsQ0FBQTtRQUNwRCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDbkQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNyQixDQUFDO0lBRUQsTUFBTSxDQUFDLG1CQUFtQixDQUFFLGNBQTBCLEVBQUUsS0FBcUI7UUFDM0UsTUFBTSxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUUsR0FBRyxLQUFLLENBQUE7UUFDNUMsK0dBQStHO1FBQy9HLElBQUksQ0FBQyxVQUFVO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFBO1FBQ3pELE9BQU8sOEJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUE7SUFDdEQsQ0FBQztDQUNGO0FBakNELG9DQWlDQztBQUNELDZCQUFXLENBQUMsWUFBWSxDQUFDLENBQUE7QUFFekIsTUFBYSxlQUFlO0lBRzFCLFlBQWEsU0FBd0MsRUFBRSxLQUFxQjtRQUMxRSxNQUFNLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxHQUFHLEtBQUssQ0FBQTtRQUM1QyxnSEFBZ0g7UUFDaEgsSUFBSSxDQUFDLFVBQVU7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUE7UUFDekQ7Ozs7OztXQU1HO1FBQ0gsSUFBSSxTQUFTLFlBQVksVUFBVSxFQUFFO1lBQ25DLE1BQU0sR0FBRyxHQUFHLDBCQUFZLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBO1lBQzNELGtDQUFnQixDQUErQixJQUFJLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1NBQ3ZFO2FBQU07WUFDTCxrQ0FBZ0IsQ0FBK0IsSUFBSSxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQTtTQUM3RTtRQUNELGtDQUFnQixDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLENBQUMsQ0FBQTtRQUNwRCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDdEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNyQixDQUFDO0lBRUQsTUFBTSxDQUFDLG1CQUFtQixDQUFFLGFBQXlCLEVBQUUsS0FBcUI7UUFDMUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUUsR0FBRyxLQUFLLENBQUE7UUFDNUMsMkdBQTJHO1FBQzNHLElBQUksQ0FBQyxVQUFVO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFBO1FBRXpELE9BQU8sOEJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUE7SUFDckQsQ0FBQztDQUNGO0FBaENELDBDQWdDQztBQUNELDZCQUFXLENBQUMsZUFBZSxDQUFDLENBQUE7QUFFNUIsU0FBUyxVQUFVLENBQUUsSUFBZ0I7SUFDbkMsTUFBTSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLEdBQUcsSUFBSSxDQUFBO0lBQy9DLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFBO0FBQ3BELENBQUMifQ==