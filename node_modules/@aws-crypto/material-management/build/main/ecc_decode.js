"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bn_js_1 = __importDefault(require("bn.js"));
const needs_1 = require("./needs");
const prime256v1 = eccDecodeCompressedPoint(new bn_js_1.default('FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF', 16), new bn_js_1.default('FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC', 16), new bn_js_1.default('5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B', 16)
// new BN('FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551', 16)
);
const secp384r1 = eccDecodeCompressedPoint(new bn_js_1.default('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF', 16), new bn_js_1.default('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC', 16), new bn_js_1.default('B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF', 16)
// new BN('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973', 16)
);
exports.decodeNamedCurves = Object.freeze({
    // NodeJS/OpenSSL names
    prime256v1,
    secp384r1,
    // WebCrypto/Browser names
    'P-256': prime256v1,
    'P-384': secp384r1
});
/*
 * 1. This only works for prime curves
 * 2. This will not handle the point at infinity
 */
function eccDecodeCompressedPoint(p, a, b /*, order: BN */) {
    const zero = new bn_js_1.default(0);
    const one = new bn_js_1.default(1);
    const two = new bn_js_1.default(2);
    const three = new bn_js_1.default(3);
    const four = new bn_js_1.default(4);
    // # Only works for p % 4 == 3 at this time.
    // # This is the case for all currently supported algorithms.
    // # This will need to be expanded if curves which do not match this are added.
    // #  Python-ecdsa has these algorithms implemented.  Copy or reference?
    // #  https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm
    // #  Handbook of Applied Cryptography, algorithms 3.34 - 3.39
    needs_1.needs(p.mod(four).eq(three), 'Curve not supported at this time');
    const montP = bn_js_1.default.mont(p);
    const redPow = p.add(one).div(four);
    const yOrderMap = {
        2: zero,
        3: one
    };
    const compressedLength = 1 + p.bitLength() / 8;
    return function decode(compressedPoint) {
        /* Precondition: compressedPoint must be the correct length. */
        needs_1.needs(compressedPoint.byteLength === compressedLength, 'Compressed point length is not correct.');
        const xBuff = compressedPoint.slice(1);
        const keyLength = xBuff.byteLength;
        const x = new bn_js_1.default([...xBuff]);
        const yOrder = yOrderMap[compressedPoint[0]];
        const x3 = x.pow(three).mod(p);
        const ax = a.mul(x).mod(p);
        const alpha = x3.add(ax).add(b).mod(p);
        const beta = alpha.toRed(montP).redPow(redPow).fromRed();
        if (beta.mod(two).eq(yOrder)) {
            const y = beta;
            return returnBuffer(x, y, keyLength);
        }
        else {
            const y = p.sub(beta);
            return returnBuffer(x, y, keyLength);
        }
    };
}
function returnBuffer(x, y, keyLength) {
    return new Uint8Array([
        4,
        ...x.toArray('be', keyLength),
        ...y.toArray('be', keyLength)
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWNjX2RlY29kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lY2NfZGVjb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7OztHQWFHOzs7OztBQUVILGtEQUFzQjtBQUV0QixtQ0FBK0I7QUFFL0IsTUFBTSxVQUFVLEdBQUcsd0JBQXdCLENBQ3pDLElBQUksZUFBRSxDQUFDLGtFQUFrRSxFQUFFLEVBQUUsQ0FBQyxFQUM5RSxJQUFJLGVBQUUsQ0FBQyxrRUFBa0UsRUFBRSxFQUFFLENBQUMsRUFDOUUsSUFBSSxlQUFFLENBQUMsa0VBQWtFLEVBQUUsRUFBRSxDQUFDO0FBQzlFLGlGQUFpRjtDQUNsRixDQUFBO0FBQ0QsTUFBTSxTQUFTLEdBQUcsd0JBQXdCLENBQ3hDLElBQUksZUFBRSxDQUFDLGtHQUFrRyxFQUFFLEVBQUUsQ0FBQyxFQUM5RyxJQUFJLGVBQUUsQ0FBQyxrR0FBa0csRUFBRSxFQUFFLENBQUMsRUFDOUcsSUFBSSxlQUFFLENBQUMsa0dBQWtHLEVBQUUsRUFBRSxDQUFDO0FBQzlHLGlIQUFpSDtDQUNsSCxDQUFBO0FBR1ksUUFBQSxpQkFBaUIsR0FBZ0MsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUMxRSx1QkFBdUI7SUFDdkIsVUFBVTtJQUNWLFNBQVM7SUFDVCwwQkFBMEI7SUFDMUIsT0FBTyxFQUFFLFVBQVU7SUFDbkIsT0FBTyxFQUFFLFNBQVM7Q0FDbkIsQ0FBQyxDQUFBO0FBRUY7OztHQUdHO0FBQ0gsU0FBUyx3QkFBd0IsQ0FBRSxDQUFLLEVBQUUsQ0FBSyxFQUFFLENBQUssQ0FBQSxnQkFBZ0I7SUFDcEUsTUFBTSxJQUFJLEdBQUcsSUFBSSxlQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDdEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxlQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDckIsTUFBTSxHQUFHLEdBQUcsSUFBSSxlQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFD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