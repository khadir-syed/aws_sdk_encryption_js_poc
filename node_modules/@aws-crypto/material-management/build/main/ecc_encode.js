"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bn_js_1 = __importDefault(require("bn.js"));
const needs_1 = require("./needs");
const prime256v1 = eccEncodeCompressedPoint(32);
const secp384r1 = eccEncodeCompressedPoint(48);
exports.encodeNamedCurves = Object.freeze({
    // NodeJS/OpenSSL names
    prime256v1,
    secp384r1,
    // WebCrypto/Browser names
    'P-256': prime256v1,
    'P-384': secp384r1
});
/*
 * 1. This only works for prime curves
 * 2. This will not handle the point at infinity
 */
function eccEncodeCompressedPoint(keyLength) {
    return function encode(publicKey) {
        /* Precondition: publicKey must be the right length.
         * The format for the public key is [type, ...keyLength, ...keyLength]
         */
        needs_1.needs(publicKey.byteLength === 1 + keyLength * 2, 'Malformed public key.');
        // const type = publicKey[0]
        const x = publicKey.slice(1, keyLength + 1);
        const y = publicKey.slice(keyLength + 1, keyLength * 2 + 1);
        const yOrder = (new bn_js_1.default([...y])).mod(new bn_js_1.default(2)).toNumber() + 2;
        const compressPoint = new Uint8Array(1 + x.length);
        compressPoint.set([yOrder], 0);
        compressPoint.set(x, 1);
        return compressPoint;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWNjX2VuY29kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lY2NfZW5jb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7OztHQWFHOzs7OztBQUVILGtEQUFzQjtBQUV0QixtQ0FBK0I7QUFFL0IsTUFBTSxVQUFVLEdBQUcsd0JBQXdCLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDL0MsTUFBTSxTQUFTLEdBQUcsd0JBQXdCLENBQUMsRUFBRSxDQUFDLENBQUE7QUFJakMsUUFBQSxpQkFBaUIsR0FBZ0MsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUMxRSx1QkFBdUI7SUFDdkIsVUFBVTtJQUNWLFNBQVM7SUFDVCwwQkFBMEI7SUFDMUIsT0FBTyxFQUFFLFVBQVU7SUFDbkIsT0FBTyxFQUFFLFNBQVM7Q0FDbkIsQ0FBQyxDQUFBO0FBRUY7OztHQUdHO0FBQ0gsU0FBUyx3QkFBd0IsQ0FBRSxTQUFpQjtJQUNsRCxPQUFPLFNBQVMsTUFBTSxDQUFFLFNBQXFCO1FBQzNDOztXQUVHO1FBQ0gsYUFBSyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEtBQUssQ0FBQyxHQUFHLFNBQVMsR0FBRyxDQUFDLEVBQUUsdUJBQXVCLENBQUMsQ0FBQTtRQUUxRSw0QkFBNEI7UUFDNUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBQzNDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLENBQUMsRUFBRSxTQUFTLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBRTNELE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFFN0QsTUFBTSxhQUFhLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNsRCxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDOUIsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFFdkIsT0FBTyxhQUFhLENBQUE7SUFDdEIsQ0FBQyxDQUFBO0FBQ0gsQ0FBQyJ9