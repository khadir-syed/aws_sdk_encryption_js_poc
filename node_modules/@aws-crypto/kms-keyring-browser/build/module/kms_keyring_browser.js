/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { KmsKeyringClass, // eslint-disable-line no-unused-vars
getClient, limitRegions, excludeRegions, cacheClients } from '@aws-crypto/kms-keyring';
import { // eslint-disable-line no-unused-vars
immutableClass, importForWebCryptoEncryptionMaterial, importForWebCryptoDecryptionMaterial, KeyringWebCrypto // eslint-disable-line no-unused-vars
 } from '@aws-crypto/material-management-browser';
import { KMS } from 'aws-sdk'; // eslint-disable-line no-unused-vars
const getKmsClient = getClient(KMS, { customUserAgent: 'AwsEncryptionSdkJavascriptBrowser' });
const cacheKmsClients = cacheClients(getKmsClient);
export class KmsKeyringBrowser extends KmsKeyringClass(KeyringWebCrypto) {
    constructor({ clientProvider = cacheKmsClients, keyIds, generatorKeyId, grantTokens, discovery } = {}) {
        super({ clientProvider, keyIds, generatorKeyId, grantTokens, discovery });
    }
    async _onEncrypt(material) {
        const _material = await super._onEncrypt(material);
        return importForWebCryptoEncryptionMaterial(_material);
    }
    async _onDecrypt(material, encryptedDataKeys) {
        const _material = await super._onDecrypt(material, encryptedDataKeys);
        return importForWebCryptoDecryptionMaterial(_material);
    }
}
immutableClass(KmsKeyringBrowser);
export { getClient, cacheKmsClients, limitRegions, excludeRegions, cacheClients, KMS };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia21zX2tleXJpbmdfYnJvd3Nlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9rbXNfa2V5cmluZ19icm93c2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0dBYUc7QUFFSCxPQUFPLEVBQ0wsZUFBZSxFQUlJLHFDQUFxQztBQUN4RCxTQUFTLEVBQ1QsWUFBWSxFQUNaLGNBQWMsRUFDZCxZQUFZLEVBQ2IsTUFBTSx5QkFBeUIsQ0FBQTtBQUNoQyxPQUFPLEVBSWEscUNBQXFDO0FBQ3ZELGNBQWMsRUFDZCxvQ0FBb0MsRUFDcEMsb0NBQW9DLEVBQ3BDLGdCQUFnQixDQUFDLHFDQUFxQztFQUN2RCxNQUFNLHlDQUF5QyxDQUFBO0FBQ2hELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxTQUFTLENBQUEsQ0FBQyxxQ0FBcUM7QUFFbkUsTUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxFQUFFLGVBQWUsRUFBRSxtQ0FBbUMsRUFBRSxDQUFDLENBQUE7QUFDN0YsTUFBTSxlQUFlLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFBO0FBTWxELE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxlQUFlLENBQUMsZ0JBQWlFLENBQUM7SUFDdkgsWUFBYSxFQUNYLGNBQWMsR0FBRyxlQUFlLEVBQ2hDLE1BQU0sRUFDTixjQUFjLEVBQ2QsV0FBVyxFQUNYLFNBQVMsS0FDbUIsRUFBRTtRQUM5QixLQUFLLENBQUMsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQTtJQUMzRSxDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVUsQ0FBRSxRQUFxQztRQUNyRCxNQUFNLFNBQVMsR0FBRyxNQUFNLEtBQUssQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUE7UUFFbEQsT0FBTyxvQ0FBb0MsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUN4RCxDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVUsQ0FBRSxRQUFxQyxFQUFFLGlCQUFxQztRQUM1RixNQUFNLFNBQVMsR0FBRyxNQUFNLEtBQUssQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLGlCQUFpQixDQUFDLENBQUE7UUFFckUsT0FBTyxvQ0FBb0MsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUN4RCxDQUFDO0NBQ0Y7QUFDRCxjQUFjLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtBQUVqQyxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FBQSJ9