"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const material_management_browser_1 = require("@aws-crypto/material-management-browser");
const serialize_1 = require("@aws-crypto/serialize");
const util_utf8_browser_1 = require("@aws-sdk/util-utf8-browser");
const web_crypto_backend_1 = require("@aws-crypto/web-crypto-backend");
const serialize = serialize_1.serializeFactory(util_utf8_browser_1.fromUtf8);
const { messageAADContentString, messageAAD } = serialize_1.aadFactory(util_utf8_browser_1.fromUtf8);
async function encrypt(cmm, plaintext, { suiteId, encryptionContext = {}, frameLength = serialize_1.FRAME_LENGTH } = {}) {
    /* Precondition: The frameLength must be less than the maximum frame size for browser encryption. */
    material_management_browser_1.needs(frameLength > 0 && serialize_1.Maximum.FRAME_SIZE >= frameLength, `frameLength out of bounds: 0 > frameLength >= ${serialize_1.Maximum.FRAME_SIZE}`);
    const backend = await web_crypto_backend_1.getWebCryptoBackend();
    if (!backend)
        throw new Error('No supported crypto backend');
    /* If the cmm is a Keyring, wrap it with WebCryptoDefaultCryptographicMaterialsManager. */
    cmm = cmm instanceof material_management_browser_1.KeyringWebCrypto
        ? new material_management_browser_1.WebCryptoDefaultCryptographicMaterialsManager(cmm)
        : cmm;
    // Subtle Crypto functions are all one-shot so all the plaintext needs to be available.
    const plaintextLength = plaintext.byteLength;
    const suite = suiteId ? new material_management_browser_1.WebCryptoAlgorithmSuite(suiteId) : new material_management_browser_1.WebCryptoAlgorithmSuite(material_management_browser_1.AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384);
    const encryptionRequest = {
        suite,
        encryptionContext,
        plaintextLength
    };
    const material = await cmm.getEncryptionMaterials(encryptionRequest);
    const { kdfGetSubtleEncrypt, subtleSign, dispose } = await material_management_browser_1.getEncryptHelper(material);
    const messageId = await backend.randomValues(serialize_1.MESSAGE_ID_LENGTH);
    const { id, ivLength } = material.suite;
    const messageHeader = {
        version: serialize_1.SerializationVersion.V1,
        type: serialize_1.ObjectType.CUSTOMER_AE_DATA,
        suiteId: id,
        messageId,
        encryptionContext: material.encryptionContext,
        encryptedDataKeys: material.encryptedDataKeys,
        contentType: serialize_1.ContentType.FRAMED_DATA,
        headerIvLength: ivLength,
        frameLength
    };
    const header = serialize.serializeMessageHeader(messageHeader);
    const info = serialize_1.kdfInfo(id, messageId);
    const getSubtleEncrypt = kdfGetSubtleEncrypt(info);
    const headerAuthIv = serialize.headerAuthIv(ivLength);
    const headerAuthTag = await getSubtleEncrypt(headerAuthIv, header)(new Uint8Array(0));
    const numberOfFrames = Math.ceil(plaintextLength / frameLength);
    /* The final frame has a variable length.
     * The value needs to be known, but should only be calculated once.
     * So I calculate how much of a frame I should have at the end.
     */
    const finalFrameLength = frameLength - ((numberOfFrames * frameLength) - plaintextLength);
    const bodyContent = [];
    for (let sequenceNumber = 1; numberOfFrames >= sequenceNumber; sequenceNumber += 1) {
        const frameIv = serialize.frameIv(ivLength, sequenceNumber);
        const isFinalFrame = sequenceNumber === numberOfFrames;
        const frameHeader = isFinalFrame
            ? serialize.finalFrameHeader(sequenceNumber, frameIv, finalFrameLength)
            : serialize.frameHeader(sequenceNumber, frameIv);
        const contentString = messageAADContentString({ contentType: messageHeader.contentType, isFinalFrame });
        const messageAdditionalData = messageAAD(messageId, contentString, sequenceNumber, isFinalFrame ? finalFrameLength : frameLength);
        /* Slicing an ArrayBuffer in a browser is suboptimal.
         * It makes a copy.s
         * So I just make a new view for the length of the frame.
         */
        const framePlaintext = new Uint8Array(plaintext.buffer, (sequenceNumber - 1) * frameLength, isFinalFrame ? finalFrameLength : frameLength);
        const cipherBufferAndAuthTag = await getSubtleEncrypt(frameIv, messageAdditionalData)(framePlaintext);
        bodyContent.push(frameHeader, cipherBufferAndAuthTag);
    }
    const result = serialize_1.concatBuffers(header, headerAuthIv, headerAuthTag, ...bodyContent);
    dispose();
    if (typeof subtleSign === 'function') {
        const signatureArrayBuffer = await subtleSign(result);
        const derSignature = serialize_1.raw2der(new Uint8Array(signatureArrayBuffer), material.suite);
        const signatureInfo = serialize_1.serializeSignatureInfo(derSignature);
        return { result: serialize_1.concatBuffers(result, signatureInfo), messageHeader };
    }
    else {
        return { result: result, messageHeader };
    }
}
exports.encrypt = encrypt;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jcnlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmNyeXB0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7OztHQWFHOztBQUVILHlGQVVnRDtBQUNoRCxxREFjOEI7QUFDOUIsa0VBQXFEO0FBQ3JELHVFQUFvRTtBQUVwRSxNQUFNLFNBQVMsR0FBRyw0QkFBZ0IsQ0FBQyw0QkFBUSxDQUFDLENBQUE7QUFDNUMsTUFBTSxFQUFFLHVCQUF1QixFQUFFLFVBQVUsRUFBRSxHQUFHLHNCQUFVLENBQUMsNEJBQVEsQ0FBQyxDQUFBO0FBYzdELEtBQUssVUFBVSxPQUFPLENBQzNCLEdBQStDLEVBQy9DLFNBQXFCLEVBQ3JCLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixHQUFHLEVBQUUsRUFBRSxXQUFXLEdBQUcsd0JBQVksS0FBbUIsRUFBRTtJQUVsRixvR0FBb0c7SUFDcEcsbUNBQUssQ0FBQyxXQUFXLEdBQUcsQ0FBQyxJQUFJLG1CQUFPLENBQUMsVUFBVSxJQUFJLFdBQVcsRUFBRSxpREFBaUQsbUJBQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFBO0lBRWxJLE1BQU0sT0FBTyxHQUFHLE1BQU0sd0NBQW1CLEVBQUUsQ0FBQTtJQUMzQyxJQUFJLENBQUMsT0FBTztRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQTtJQUU1RCwwRkFBMEY7SUFDMUYsR0FBRyxHQUFHLEdBQUcsWUFBWSw4Q0FBZ0I7UUFDbkMsQ0FBQyxDQUFDLElBQUksMkVBQTZDLENBQUMsR0FBRyxDQUFDO1FBQ3hELENBQUMsQ0FBQyxHQUFHLENBQUE7SUFFUCx1RkFBdUY7SUFDdkYsTUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQTtJQUM1QyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUkscURBQXVCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUkscURB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