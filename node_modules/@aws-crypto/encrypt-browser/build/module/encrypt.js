/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { WebCryptoAlgorithmSuite, WebCryptoDefaultCryptographicMaterialsManager, // eslint-disable-line no-unused-vars
AlgorithmSuiteIdentifier, getEncryptHelper, KeyringWebCrypto, needs } from '@aws-crypto/material-management-browser';
import { serializeFactory, aadFactory, kdfInfo, concatBuffers, // eslint-disable-line no-unused-vars
SerializationVersion, ObjectType, ContentType, serializeSignatureInfo, FRAME_LENGTH, MESSAGE_ID_LENGTH, raw2der, Maximum } from '@aws-crypto/serialize';
import { fromUtf8 } from '@aws-sdk/util-utf8-browser';
import { getWebCryptoBackend } from '@aws-crypto/web-crypto-backend';
const serialize = serializeFactory(fromUtf8);
const { messageAADContentString, messageAAD } = aadFactory(fromUtf8);
export async function encrypt(cmm, plaintext, { suiteId, encryptionContext = {}, frameLength = FRAME_LENGTH } = {}) {
    /* Precondition: The frameLength must be less than the maximum frame size for browser encryption. */
    needs(frameLength > 0 && Maximum.FRAME_SIZE >= frameLength, `frameLength out of bounds: 0 > frameLength >= ${Maximum.FRAME_SIZE}`);
    const backend = await getWebCryptoBackend();
    if (!backend)
        throw new Error('No supported crypto backend');
    /* If the cmm is a Keyring, wrap it with WebCryptoDefaultCryptographicMaterialsManager. */
    cmm = cmm instanceof KeyringWebCrypto
        ? new WebCryptoDefaultCryptographicMaterialsManager(cmm)
        : cmm;
    // Subtle Crypto functions are all one-shot so all the plaintext needs to be available.
    const plaintextLength = plaintext.byteLength;
    const suite = suiteId ? new WebCryptoAlgorithmSuite(suiteId) : new WebCryptoAlgorithmSuite(AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384);
    const encryptionRequest = {
        suite,
        encryptionContext,
        plaintextLength
    };
    const material = await cmm.getEncryptionMaterials(encryptionRequest);
    const { kdfGetSubtleEncrypt, subtleSign, dispose } = await getEncryptHelper(material);
    const messageId = await backend.randomValues(MESSAGE_ID_LENGTH);
    const { id, ivLength } = material.suite;
    const messageHeader = {
        version: SerializationVersion.V1,
        type: ObjectType.CUSTOMER_AE_DATA,
        suiteId: id,
        messageId,
        encryptionContext: material.encryptionContext,
        encryptedDataKeys: material.encryptedDataKeys,
        contentType: ContentType.FRAMED_DATA,
        headerIvLength: ivLength,
        frameLength
    };
    const header = serialize.serializeMessageHeader(messageHeader);
    const info = kdfInfo(id, messageId);
    const getSubtleEncrypt = kdfGetSubtleEncrypt(info);
    const headerAuthIv = serialize.headerAuthIv(ivLength);
    const headerAuthTag = await getSubtleEncrypt(headerAuthIv, header)(new Uint8Array(0));
    const numberOfFrames = Math.ceil(plaintextLength / frameLength);
    /* The final frame has a variable length.
     * The value needs to be known, but should only be calculated once.
     * So I calculate how much of a frame I should have at the end.
     */
    const finalFrameLength = frameLength - ((numberOfFrames * frameLength) - plaintextLength);
    const bodyContent = [];
    for (let sequenceNumber = 1; numberOfFrames >= sequenceNumber; sequenceNumber += 1) {
        const frameIv = serialize.frameIv(ivLength, sequenceNumber);
        const isFinalFrame = sequenceNumber === numberOfFrames;
        const frameHeader = isFinalFrame
            ? serialize.finalFrameHeader(sequenceNumber, frameIv, finalFrameLength)
            : serialize.frameHeader(sequenceNumber, frameIv);
        const contentString = messageAADContentString({ contentType: messageHeader.contentType, isFinalFrame });
        const messageAdditionalData = messageAAD(messageId, contentString, sequenceNumber, isFinalFrame ? finalFrameLength : frameLength);
        /* Slicing an ArrayBuffer in a browser is suboptimal.
         * It makes a copy.s
         * So I just make a new view for the length of the frame.
         */
        const framePlaintext = new Uint8Array(plaintext.buffer, (sequenceNumber - 1) * frameLength, isFinalFrame ? finalFrameLength : frameLength);
        const cipherBufferAndAuthTag = await getSubtleEncrypt(frameIv, messageAdditionalData)(framePlaintext);
        bodyContent.push(frameHeader, cipherBufferAndAuthTag);
    }
    const result = concatBuffers(header, headerAuthIv, headerAuthTag, ...bodyContent);
    dispose();
    if (typeof subtleSign === 'function') {
        const signatureArrayBuffer = await subtleSign(result);
        const derSignature = raw2der(new Uint8Array(signatureArrayBuffer), material.suite);
        const signatureInfo = serializeSignatureInfo(derSignature);
        return { result: concatBuffers(result, signatureInfo), messageHeader };
    }
    else {
        return { result: result, messageHeader };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jcnlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmNyeXB0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0dBYUc7QUFFSCxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLDZDQUE2QyxFQUUxQixxQ0FBcUM7QUFDeEQsd0JBQXdCLEVBQ3hCLGdCQUFnQixFQUNoQixnQkFBZ0IsRUFDaEIsS0FBSyxFQUVOLE1BQU0seUNBQXlDLENBQUE7QUFDaEQsT0FBTyxFQUNMLGdCQUFnQixFQUNoQixVQUFVLEVBQ1YsT0FBTyxFQUNQLGFBQWEsRUFDRSxxQ0FBcUM7QUFDcEQsb0JBQW9CLEVBQ3BCLFVBQVUsRUFDVixXQUFXLEVBQ1gsc0JBQXNCLEVBQ3RCLFlBQVksRUFDWixpQkFBaUIsRUFDakIsT0FBTyxFQUNQLE9BQU8sRUFDUixNQUFNLHVCQUF1QixDQUFBO0FBQzlCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUNyRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUVwRSxNQUFNLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUM1QyxNQUFNLEVBQUUsdUJBQXVCLEVBQUUsVUFBVSxFQUFFLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBY3BFLE1BQU0sQ0FBQyxLQUFLLFVBQVUsT0FBTyxDQUMzQixHQUErQyxFQUMvQyxTQUFxQixFQUNyQixFQUFFLE9BQU8sRUFBRSxpQkFBaUIsR0FBRyxFQUFFLEVBQUUsV0FBVyxHQUFHLFlBQVksS0FBbUIsRUFBRTtJQUVsRixvR0FBb0c7SUFDcEcsS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLElBQUksT0FBTyxDQUFDLFVBQVUsSUFBSSxXQUFXLEVBQUUsaURBQWlELE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFBO0lBRWxJLE1BQU0sT0FBTyxHQUFHLE1BQU0sbUJB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