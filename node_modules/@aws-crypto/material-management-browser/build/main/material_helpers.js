"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 * this file except in compliance with the License. A copy of the License is
 * located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const material_management_1 = require("@aws-crypto/material-management");
const web_crypto_backend_1 = require("@aws-crypto/web-crypto-backend");
const bytes2_jwk_1 = require("./bytes2_jwk");
exports.getEncryptHelper = async (material) => {
    const backend = await web_crypto_backend_1.getWebCryptoBackend();
    /* Precondition: WebCryptoEncryptionMaterial must have a valid data key. */
    material_management_1.needs(material.hasValidKey(), 'Material has no CryptoKey.');
    const { signatureHash } = material.suite;
    const kdfGetSubtleEncrypt = getSubtleFunction(material, backend, 'encrypt');
    return Object.freeze({
        kdfGetSubtleEncrypt,
        subtleSign: signatureHash ? getSubtleSign : undefined,
        dispose
    });
    function getSubtleSign(data) {
        if (!signatureHash)
            throw new Error('Algorithm suite does not support signing.');
        const { signatureKey } = material;
        if (!signatureKey)
            throw new Error('Malformed Material.');
        const { privateKey } = signatureKey;
        if (!material_management_1.isCryptoKey(privateKey))
            throw new Error('Malformed Material.');
        const algorithm = { name: 'ECDSA', hash: { name: signatureHash } };
        return web_crypto_backend_1.getNonZeroByteBackend(backend).sign(algorithm, privateKey, data);
    }
    function dispose() {
        material.zeroUnencryptedDataKey();
    }
};
exports.getDecryptionHelper = async (material) => {
    const backend = await web_crypto_backend_1.getWebCryptoBackend();
    /* Precondition: WebCryptoDecryptionMaterial must have a valid data key. */
    material_management_1.needs(material.hasValidKey(), 'Material has no valid data key.');
    const { signatureHash } = material.suite;
    const kdfGetSubtleDecrypt = getSubtleFunction(material, backend, 'decrypt');
    return Object.freeze({
        kdfGetSubtleDecrypt,
        subtleVerify: signatureHash ? subtleVerify : undefined,
        dispose
    });
    function subtleVerify(signature, data) {
        if (!signatureHash)
            throw new Error('Algorithm suite does not support signing.');
        const { verificationKey } = material;
        if (!verificationKey)
            throw new Error('Malformed Material.');
        const { publicKey } = verificationKey;
        if (!material_management_1.isCryptoKey(publicKey))
            throw new Error('Malformed Material.');
        const algorithm = { name: 'ECDSA', hash: { name: signatureHash } };
        return web_crypto_backend_1.getNonZeroByteBackend(backend).verify(algorithm, publicKey, signature, data);
    }
    function dispose() {
        material.zeroUnencryptedDataKey();
    }
};
function getSubtleFunction(material, backend, subtleFunction = material_management_1.subtleFunctionForMaterial(material)) {
    /* Precondition: The material must have a CryptoKey. */
    material_management_1.needs(material.hasCryptoKey, 'Material must have a CryptoKey.');
    const cryptoKey = material.getCryptoKey();
    /* Precondition: The cryptoKey and backend must match in terms of Mixed vs Full support. */
    material_management_1.needs(material_management_1.isCryptoKey(cryptoKey) === web_crypto_backend_1.isFullSupportWebCryptoBackend(backend), 'CryptoKey vs WebCrypto backend mismatch.');
    const { suite } = material;
    const { encryption: cipherName, ivLength, tagLength } = suite;
    return (info) => {
        const derivedKeyPromise = material_management_1.isCryptoKey(cryptoKey)
            ? WebCryptoKdf(web_crypto_backend_1.getNonZeroByteBackend(backend), material, cryptoKey, [subtleFunction], info)
            : Promise.all([
                WebCryptoKdf(web_crypto_backend_1.getNonZeroByteBackend(backend), material, cryptoKey.nonZeroByteCryptoKey, [subtleFunction], info),
                WebCryptoKdf(web_crypto_backend_1.getZeroByteSubtle(backend), material, cryptoKey.zeroByteCryptoKey, [subtleFunction], info)
            ]).then(([nonZeroByteCryptoKey, zeroByteCryptoKey]) => ({ nonZeroByteCryptoKey, zeroByteCryptoKey }));
        return (iv, additionalData) => {
            /* Precondition: The length of the IV must match the WebCryptoAlgorithmSuite specification. */
            material_management_1.needs(iv.byteLength === ivLength, 'Iv length does not match algorithm suite specification');
            return async (data) => {
                const deriveKey = await derivedKeyPromise;
                if (material_management_1.isCryptoKey(deriveKey) && web_crypto_backend_1.isFullSupportWebCryptoBackend(backend)) {
                    const { subtle } = backend;
                    const algorithm = { name: cipherName, iv, additionalData, tagLength };
                    return subtle[subtleFunction](algorithm, deriveKey, data);
                }
                else if (!material_management_1.isCryptoKey(deriveKey) && !web_crypto_backend_1.isFullSupportWebCryptoBackend(backend)) {
                    const { nonZeroByteSubtle, zeroByteSubtle } = backend;
                    const { nonZeroByteCryptoKey, zeroByteCryptoKey } = deriveKey;
                    const algorithm = { name: cipherName, iv, additionalData, tagLength };
                    if (data.byteLength) {
                        return nonZeroByteSubtle[subtleFunction](algorithm, nonZeroByteCryptoKey, data);
                    }
                    else {
                        return zeroByteSubtle[subtleFunction](algorithm, zeroByteCryptoKey, data);
                    }
                }
                // This should be impossible
                throw new Error('Unknown Error');
            };
        };
    };
}
exports.getSubtleFunction = getSubtleFunction;
async function WebCryptoKdf(subtle, material, cryptoKey, keyUsages, info) {
    const { kdf, kdfHash, keyLength, encryption } = material.suite;
    /* Check for early return (Postcondition): No WebCrypto KDF, just return the unencrypted data key. */
    if (!kdf && !kdfHash)
        return cryptoKey;
    /* Precondition: Valid HKDF values must exist for browsers. */
    material_management_1.needs(kdf === 'HKDF' &&
        kdfHash &&
        info instanceof Uint8Array &&
        info.byteLength, 'Invalid HKDF values.');
    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams
    const kdfAlgorithm = { name: kdf, hash: { name: kdfHash }, info, salt: new Uint8Array() };
    const derivedKeyAlgorithm = { name: encryption, length: keyLength };
    const extractable = false;
    const deriveKey = await subtle
        .deriveKey(
    // @ts-ignore types need to be updated see: https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams
    kdfAlgorithm, cryptoKey, derivedKeyAlgorithm, extractable, keyUsages);
    /* Postcondition: The derived key must conform to the algorith suite specification. */
    material_management_1.needs(material_management_1.isValidCryptoKey(deriveKey, material), 'Invalid derived key');
    return deriveKey;
}
exports.WebCryptoKdf = WebCryptoKdf;
async function importCryptoKey(backend, material, keyUsages = [material_management_1.keyUsageForMaterial(material)]) {
    if (web_crypto_backend_1.isFullSupportWebCryptoBackend(backend)) {
        return _importCryptoKey(backend.subtle, material, keyUsages);
    }
    else {
        return Promise.all([
            _importCryptoKey(web_crypto_backend_1.getNonZeroByteBackend(backend), material, keyUsages),
            _importCryptoKey(web_crypto_backend_1.getZeroByteSubtle(backend), material, keyUsages)
        ]).then(([nonZeroByteCryptoKey, zeroByteCryptoKey]) => ({ nonZeroByteCryptoKey, zeroByteCryptoKey }));
    }
}
exports.importCryptoKey = importCryptoKey;
async function _importCryptoKey(subtle, material, keyUsages = [material_management_1.keyUsageForMaterial(material)]) {
    const { suite } = material;
    const extractable = false;
    const udk = material_management_1.unwrapDataKey(material.getUnencryptedDataKey());
    if (suite.kdf) {
        /* For several browsers, import for a key to derive with HKDF
         * *must* be raw.  This may cause some compatibility issues
         * with browsers that need a zero byte gcm fallback.
         */
        const format = 'raw';
        const algorithm = suite.kdf;
        return subtle.importKey(format, udk, algorithm, extractable, keyUsages);
    }
    else {
        const format = 'jwk';
        const algorithm = suite.encryption;
        const jwk = bytes2_jwk_1.bytes2JWK(udk);
        return subtle.importKey(format, jwk, algorithm, extractable, keyUsages);
    }
}
exports._importCryptoKey = _importCryptoKey;
//# sourceMappingURL=data:application/json;base64,