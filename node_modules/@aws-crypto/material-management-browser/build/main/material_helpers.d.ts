import { WebCryptoEncryptionMaterial, // eslint-disable-line no-unused-vars
WebCryptoDecryptionMaterial, WebCryptoMaterial } from '@aws-crypto/material-management';
import { WebCryptoBackend } from '@aws-crypto/web-crypto-backend';
export interface GetSubtleEncrypt {
    (iv: Uint8Array, additionalData: Uint8Array): (data: Uint8Array) => Promise<ArrayBuffer>;
}
export interface KdfGetSubtleEncrypt {
    (info: Uint8Array): GetSubtleEncrypt;
}
export interface SubtleSign {
    (data: Uint8Array): PromiseLike<ArrayBuffer>;
}
export interface WebCryptoEncryptionMaterialHelper {
    kdfGetSubtleEncrypt: KdfGetSubtleEncrypt;
    subtleSign?: SubtleSign;
    dispose: () => void;
}
export interface GetEncryptHelper {
    (material: WebCryptoEncryptionMaterial): Promise<WebCryptoEncryptionMaterialHelper>;
}
export declare const getEncryptHelper: GetEncryptHelper;
export interface GetSubtleDecrypt extends GetSubtleEncrypt {
}
export interface KdfGetSubtleDecrypt {
    (info: Uint8Array): GetSubtleDecrypt;
}
interface SubtleVerify {
    (signature: Uint8Array, data: Uint8Array): PromiseLike<boolean>;
}
export interface WebCryptoDecryptionMaterialHelper {
    kdfGetSubtleDecrypt: KdfGetSubtleDecrypt;
    subtleVerify?: SubtleVerify;
    dispose: () => void;
}
export interface GetDecryptionHelper {
    (material: WebCryptoDecryptionMaterial): Promise<WebCryptoDecryptionMaterialHelper>;
}
export declare const getDecryptionHelper: GetDecryptionHelper;
declare type SubtleFunction = 'encrypt' | 'decrypt';
export declare function getSubtleFunction<T extends WebCryptoMaterial<T>>(material: T, backend: WebCryptoBackend, subtleFunction?: SubtleFunction): KdfGetSubtleEncrypt | KdfGetSubtleDecrypt;
export declare function WebCryptoKdf<T extends WebCryptoMaterial<T>>(subtle: SubtleCrypto, material: T, cryptoKey: CryptoKey, keyUsages: SubtleFunction[], info: Uint8Array): Promise<CryptoKey>;
export declare function importCryptoKey<T extends WebCryptoMaterial<T>>(backend: WebCryptoBackend, material: T, keyUsages?: KeyUsage[]): Promise<CryptoKey | {
    nonZeroByteCryptoKey: CryptoKey;
    zeroByteCryptoKey: CryptoKey;
}>;
export declare function _importCryptoKey<T extends WebCryptoMaterial<T>>(subtle: SubtleCrypto, material: T, keyUsages?: KeyUsage[]): Promise<CryptoKey>;
export {};
//# sourceMappingURL=material_helpers.d.ts.map